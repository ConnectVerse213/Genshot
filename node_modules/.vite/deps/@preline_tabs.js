import {
  __commonJS
} from "./chunk-EQCVQC35.js";

// node_modules/@preline/tabs/index.js
var require_tabs = __commonJS({
  "node_modules/@preline/tabs/index.js"(exports, module) {
    !function(e, t) {
      if ("object" == typeof exports && "object" == typeof module) module.exports = t();
      else if ("function" == typeof define && define.amd) define([], t);
      else {
        var n = t();
        for (var o in n) ("object" == typeof exports ? exports : e)[o] = n[o];
      }
    }(self, () => (() => {
      "use strict";
      var e = { 166: function(e2, t2, n2) {
        var o = this && this.__importDefault || function(e3) {
          return e3 && e3.__esModule ? e3 : { default: e3 };
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        const i = n2(292), r = o(n2(961)), s = o(n2(248)), l = n2(223);
        class a extends r.default {
          constructor(e3, t3, n3) {
            var o2, i2;
            super(e3, t3, n3);
            const r2 = e3.getAttribute("data-hs-tabs"), s2 = r2 ? JSON.parse(r2) : {}, a2 = Object.assign(Object.assign({}, s2), t3);
            this.eventType = null !== (o2 = a2.eventType) && void 0 !== o2 ? o2 : "click", this.preventNavigationResolution = "number" == typeof a2.preventNavigationResolution ? a2.preventNavigationResolution : l.BREAKPOINTS[a2.preventNavigationResolution] || null, this.toggles = this.el.querySelectorAll("[data-hs-tab]"), this.extraToggleId = this.el.getAttribute("data-hs-tab-select"), this.extraToggle = this.extraToggleId ? document.querySelector(this.extraToggleId) : null, this.current = Array.from(this.toggles).find((e4) => e4.classList.contains("active")), this.currentContentId = (null === (i2 = this.current) || void 0 === i2 ? void 0 : i2.getAttribute("data-hs-tab")) || null, this.currentContent = this.currentContentId ? document.querySelector(this.currentContentId) : null, this.prev = null, this.prevContentId = null, this.prevContent = null, this.onToggleHandler = [], this.init();
          }
          toggle(e3) {
            this.open(e3);
          }
          extraToggleChange(e3) {
            this.change(e3);
          }
          init() {
            this.createCollection(window.$hsTabsCollection, this), this.toggles.forEach((e3) => {
              const t3 = (t4) => {
                "click" === this.eventType && this.preventNavigationResolution && document.body.clientWidth <= +this.preventNavigationResolution && t4.preventDefault(), this.toggle(e3);
              }, n3 = (e4) => {
                this.preventNavigationResolution && document.body.clientWidth <= +this.preventNavigationResolution && e4.preventDefault();
              };
              this.onToggleHandler.push({ el: e3, fn: t3, preventClickFn: n3 }), "click" === this.eventType ? e3.addEventListener("click", t3) : (e3.addEventListener("mouseenter", t3), e3.addEventListener("click", n3));
            }), this.extraToggle && (this.onExtraToggleChangeListener = (e3) => this.extraToggleChange(e3), this.extraToggle.addEventListener("change", this.onExtraToggleChangeListener)), "undefined" != typeof window && (window.HSAccessibilityObserver || (window.HSAccessibilityObserver = new s.default()), this.setupAccessibility());
          }
          open(e3) {
            var t3, n3, o2, r2, s2;
            this.prev = this.current, this.prevContentId = this.currentContentId, this.prevContent = this.currentContent, this.current = e3, this.currentContentId = e3.getAttribute("data-hs-tab"), this.currentContent = this.currentContentId ? document.querySelector(this.currentContentId) : null, (null === (t3 = null == this ? void 0 : this.prev) || void 0 === t3 ? void 0 : t3.ariaSelected) && (this.prev.ariaSelected = "false"), null === (n3 = this.prev) || void 0 === n3 || n3.classList.remove("active"), null === (o2 = this.prevContent) || void 0 === o2 || o2.classList.add("hidden"), (null === (r2 = null == this ? void 0 : this.current) || void 0 === r2 ? void 0 : r2.ariaSelected) && (this.current.ariaSelected = "true"), this.current.classList.add("active"), null === (s2 = this.currentContent) || void 0 === s2 || s2.classList.remove("hidden"), this.fireEvent("change", { el: e3, prev: this.prevContentId, current: this.currentContentId, tabsId: this.el.id }), (0, i.dispatch)("change.hs.tab", e3, { el: e3, prev: this.prevContentId, current: this.currentContentId, tabsId: this.el.id });
          }
          change(e3) {
            const t3 = document.querySelector(`[data-hs-tab="${e3.target.value}"]`);
            t3 && ("hover" === this.eventType ? t3.dispatchEvent(new Event("mouseenter")) : t3.click());
          }
          setupAccessibility() {
            this.accessibilityComponent = window.HSAccessibilityObserver.registerComponent(this.el, { onArrow: (e3) => {
              if (e3.metaKey) return;
              const t3 = "true" === this.el.getAttribute("data-hs-tabs-vertical") || "vertical" === this.el.getAttribute("aria-orientation");
              switch (e3.key) {
                case (t3 ? "ArrowUp" : "ArrowLeft"):
                  this.onArrow(true);
                  break;
                case (t3 ? "ArrowDown" : "ArrowRight"):
                  this.onArrow(false);
                  break;
                case "Home":
                  this.onStartEnd(true);
                  break;
                case "End":
                  this.onStartEnd(false);
              }
            } }, true, "Tabs", '[role="tablist"]');
          }
          onArrow(e3 = true) {
            const t3 = e3 ? Array.from(this.toggles).reverse() : Array.from(this.toggles), n3 = t3.find((e4) => document.activeElement === e4);
            let o2 = t3.findIndex((e4) => e4 === n3);
            o2 = o2 + 1 < t3.length ? o2 + 1 : 0, t3[o2].focus(), t3[o2].click();
          }
          onStartEnd(e3 = true) {
            const t3 = e3 ? Array.from(this.toggles) : Array.from(this.toggles).reverse();
            t3.length && (t3[0].focus(), t3[0].click());
          }
          destroy() {
            this.toggles.forEach((e3) => {
              var t3;
              const n3 = null === (t3 = this.onToggleHandler) || void 0 === t3 ? void 0 : t3.find(({ el: t4 }) => t4 === e3);
              n3 && ("click" === this.eventType ? e3.removeEventListener("click", n3.fn) : (e3.removeEventListener("mouseenter", n3.fn), e3.removeEventListener("click", n3.preventClickFn)));
            }), this.onToggleHandler = [], this.extraToggle && this.extraToggle.removeEventListener("change", this.onExtraToggleChangeListener), "undefined" != typeof window && window.HSAccessibilityObserver && window.HSAccessibilityObserver.unregisterComponent(this.accessibilityComponent), window.$hsTabsCollection = window.$hsTabsCollection.filter(({ element: e3 }) => e3.el !== this.el);
          }
          static getInstance(e3, t3) {
            const n3 = window.$hsTabsCollection.find((t4) => t4.element.el === ("string" == typeof e3 ? document.querySelector(e3) : e3));
            return n3 ? t3 ? n3 : n3.element : null;
          }
          static autoInit() {
            window.$hsTabsCollection || (window.$hsTabsCollection = []), window.$hsTabsCollection && (window.$hsTabsCollection = window.$hsTabsCollection.filter(({ element: e3 }) => document.contains(e3.el))), document.querySelectorAll('[role="tablist"]:not(select):not(.--prevent-on-load-init)').forEach((e3) => {
              window.$hsTabsCollection.find((t3) => {
                var n3;
                return (null === (n3 = null == t3 ? void 0 : t3.element) || void 0 === n3 ? void 0 : n3.el) === e3;
              }) || new a(e3);
            });
          }
          static open(e3) {
            const t3 = window.$hsTabsCollection.find((t4) => Array.from(t4.element.toggles).includes("string" == typeof e3 ? document.querySelector(e3) : e3)), n3 = t3 ? Array.from(t3.element.toggles).find((t4) => t4 === ("string" == typeof e3 ? document.querySelector(e3) : e3)) : null;
            n3 && !n3.classList.contains("active") && t3.element.open(n3);
          }
          static on(e3, t3, n3) {
            const o2 = window.$hsTabsCollection.find((e4) => Array.from(e4.element.toggles).includes("string" == typeof t3 ? document.querySelector(t3) : t3));
            o2 && (o2.element.events[e3] = n3);
          }
        }
        window.addEventListener("load", () => {
          a.autoInit();
        }), "undefined" != typeof window && (window.HSTabs = a), t2.default = a;
      }, 223: (e2, t2) => {
        Object.defineProperty(t2, "__esModule", { value: true }), t2.BREAKPOINTS = t2.COMBO_BOX_ACCESSIBILITY_KEY_SET = t2.SELECT_ACCESSIBILITY_KEY_SET = t2.TABS_ACCESSIBILITY_KEY_SET = t2.OVERLAY_ACCESSIBILITY_KEY_SET = t2.DROPDOWN_ACCESSIBILITY_KEY_SET = t2.POSITIONS = void 0, t2.POSITIONS = { auto: "auto", "auto-start": "auto-start", "auto-end": "auto-end", top: "top", "top-left": "top-start", "top-right": "top-end", bottom: "bottom", "bottom-left": "bottom-start", "bottom-right": "bottom-end", right: "right", "right-start": "right-start", "right-end": "right-end", left: "left", "left-start": "left-start", "left-end": "left-end" }, t2.DROPDOWN_ACCESSIBILITY_KEY_SET = ["Escape", "ArrowUp", "ArrowDown", "ArrowRight", "ArrowLeft", "Home", "End", "Enter"], t2.OVERLAY_ACCESSIBILITY_KEY_SET = ["Escape", "Tab"], t2.TABS_ACCESSIBILITY_KEY_SET = ["ArrowUp", "ArrowLeft", "ArrowDown", "ArrowRight", "Home", "End"], t2.SELECT_ACCESSIBILITY_KEY_SET = ["ArrowUp", "ArrowLeft", "ArrowDown", "ArrowRight", "Home", "End", "Escape", "Enter", "Space", "Tab"], t2.COMBO_BOX_ACCESSIBILITY_KEY_SET = ["ArrowUp", "ArrowLeft", "ArrowDown", "ArrowRight", "Home", "End", "Escape", "Enter"], t2.BREAKPOINTS = { xs: 0, sm: 640, md: 768, lg: 1024, xl: 1280, "2xl": 1536 };
      }, 248: (e2, t2) => {
        Object.defineProperty(t2, "__esModule", { value: true });
        t2.default = class {
          constructor() {
            this.components = [], this.currentlyOpenedComponents = [], this.activeComponent = null, this.allowedKeybindings = /* @__PURE__ */ new Set(["Escape", "Enter", " ", "Space", "ArrowDown", "ArrowUp", "ArrowLeft", "ArrowRight", "Tab", "Home", "End"]), this.initGlobalListeners();
          }
          initGlobalListeners() {
            document.addEventListener("keydown", (e3) => this.handleGlobalKeydown(e3)), document.addEventListener("focusin", (e3) => this.handleGlobalFocusin(e3));
          }
          isAllowedKeybinding(e3) {
            return !!this.allowedKeybindings.has(e3.key) || !(1 !== e3.key.length || !/^[a-zA-Z]$/.test(e3.key) || e3.metaKey || e3.ctrlKey || e3.altKey || e3.shiftKey);
          }
          getActiveComponent(e3) {
            if (!e3) return null;
            const t3 = this.components.filter((t4) => t4.wrapper.contains(e3) || t4.context && t4.context.contains(e3));
            if (0 === t3.length) return null;
            if (1 === t3.length) return t3[0];
            let n2 = null, o = Number.MAX_SAFE_INTEGER;
            for (const i of t3) {
              let t4 = 0, r = e3;
              for (; r && r !== i.wrapper && r !== i.context; ) t4++, r = r.parentElement;
              t4 < o && (o = t4, n2 = i);
            }
            return n2;
          }
          handleGlobalFocusin(e3) {
            const t3 = e3.target;
            this.activeComponent = this.getActiveComponent(t3);
          }
          handleGlobalKeydown(e3) {
            const t3 = e3.target;
            if (this.activeComponent = this.getActiveComponent(t3), this.activeComponent && this.isAllowedKeybinding(e3)) switch (e3.key) {
              case "Escape":
                if (this.activeComponent.isOpened) this.activeComponent.handlers.onEsc && (this.activeComponent.handlers.onEsc(), e3.preventDefault(), e3.stopPropagation());
                else {
                  const n3 = this.findClosestOpenParent(t3);
                  (null == n3 ? void 0 : n3.handlers.onEsc) && (n3.handlers.onEsc(), e3.preventDefault(), e3.stopPropagation());
                }
                break;
              case "Enter":
                this.activeComponent.handlers.onEnter && (this.activeComponent.handlers.onEnter(), e3.preventDefault(), e3.stopPropagation());
                break;
              case " ":
              case "Space":
                if ("INPUT" === t3.tagName || "TEXTAREA" === t3.tagName) return;
                this.activeComponent.handlers.onSpace && (this.activeComponent.handlers.onSpace(), e3.preventDefault(), e3.stopPropagation());
                break;
              case "ArrowDown":
              case "ArrowUp":
              case "ArrowLeft":
              case "ArrowRight":
                if (this.activeComponent.handlers.onArrow) {
                  if (e3.metaKey || e3.ctrlKey || e3.altKey || e3.shiftKey) return;
                  this.activeComponent.handlers.onArrow(e3), e3.preventDefault(), e3.stopPropagation();
                }
                break;
              case "Tab":
                if (!this.activeComponent.handlers.onTab) break;
                const n2 = e3.shiftKey ? this.activeComponent.handlers.onShiftTab : this.activeComponent.handlers.onTab;
                n2 && n2();
                break;
              case "Home":
                this.activeComponent.handlers.onHome && (this.activeComponent.handlers.onHome(), e3.preventDefault(), e3.stopPropagation());
                break;
              case "End":
                this.activeComponent.handlers.onEnd && (this.activeComponent.handlers.onEnd(), e3.preventDefault(), e3.stopPropagation());
                break;
              default:
                this.activeComponent.handlers.onFirstLetter && 1 === e3.key.length && /^[a-zA-Z]$/.test(e3.key) && (this.activeComponent.handlers.onFirstLetter(e3.key), e3.preventDefault(), e3.stopPropagation());
            }
          }
          findClosestOpenParent(e3) {
            let t3 = e3.parentElement;
            for (; t3; ) {
              const e4 = this.currentlyOpenedComponents.find((e5) => e5.wrapper === t3 && e5 !== this.activeComponent);
              if (e4) return e4;
              t3 = t3.parentElement;
            }
            return null;
          }
          registerComponent(e3, t3, n2 = true, o = "", i = "", r) {
            const s = { wrapper: e3, handlers: t3, isOpened: n2, name: o, selector: i, context: r, isRegistered: true };
            return this.components.push(s), s;
          }
          updateComponentState(e3, t3) {
            e3.isOpened = t3, t3 ? this.currentlyOpenedComponents.includes(e3) || this.currentlyOpenedComponents.push(e3) : this.currentlyOpenedComponents = this.currentlyOpenedComponents.filter((t4) => t4 !== e3);
          }
          unregisterComponent(e3) {
            this.components = this.components.filter((t3) => t3 !== e3), this.currentlyOpenedComponents = this.currentlyOpenedComponents.filter((t3) => t3 !== e3);
          }
          addAllowedKeybinding(e3) {
            this.allowedKeybindings.add(e3);
          }
          removeAllowedKeybinding(e3) {
            this.allowedKeybindings.delete(e3);
          }
          getAllowedKeybindings() {
            return Array.from(this.allowedKeybindings);
          }
        };
      }, 292: function(e2, t2) {
        Object.defineProperty(t2, "__esModule", { value: true }), t2.stringToBoolean = t2.menuSearchHistory = t2.isScrollable = t2.isParentOrElementHidden = t2.isJson = t2.isIpadOS = t2.isIOS = t2.isFormElement = t2.isFocused = t2.isEnoughSpace = t2.isDirectChild = t2.htmlToElement = t2.getZIndex = t2.getHighestZIndex = t2.getClassPropertyAlt = t2.getClassProperty = t2.dispatch = t2.debounce = t2.classToClassList = t2.afterTransition = void 0;
        t2.stringToBoolean = (e3) => "true" === e3;
        t2.getClassProperty = (e3, t3, n3 = "") => (window.getComputedStyle(e3).getPropertyValue(t3) || n3).replace(" ", "");
        t2.getClassPropertyAlt = (e3, t3, n3 = "") => {
          let o2 = "";
          return e3.classList.forEach((e4) => {
            e4.includes(t3) && (o2 = e4);
          }), o2.match(/:(.*)]/) ? o2.match(/:(.*)]/)[1] : n3;
        };
        const n2 = (e3) => window.getComputedStyle(e3).getPropertyValue("z-index");
        t2.getZIndex = n2;
        t2.getHighestZIndex = (e3) => {
          let t3 = Number.NEGATIVE_INFINITY;
          return e3.forEach((e4) => {
            let o2 = n2(e4);
            "auto" !== o2 && (o2 = parseInt(o2, 10), o2 > t3 && (t3 = o2));
          }), t3;
        };
        t2.isDirectChild = (e3, t3) => {
          const n3 = e3.children;
          for (let e4 = 0; e4 < n3.length; e4++) if (n3[e4] === t3) return true;
          return false;
        };
        t2.isEnoughSpace = (e3, t3, n3 = "auto", o2 = 10, i2 = null) => {
          const r = t3.getBoundingClientRect(), s = i2 ? i2.getBoundingClientRect() : null, l = window.innerHeight, a = s ? r.top - s.top : r.top, c = (i2 ? s.bottom : l) - r.bottom, d = e3.clientHeight + o2;
          return "bottom" === n3 ? c >= d : "top" === n3 ? a >= d : a >= d || c >= d;
        };
        t2.isFocused = (e3) => document.activeElement === e3;
        t2.isFormElement = (e3) => e3 instanceof HTMLInputElement || e3 instanceof HTMLTextAreaElement || e3 instanceof HTMLSelectElement;
        t2.isIOS = () => !!/iPad|iPhone|iPod/.test(navigator.platform) || navigator.maxTouchPoints && navigator.maxTouchPoints > 2 && /MacIntel/.test(navigator.platform);
        t2.isIpadOS = () => navigator.maxTouchPoints && navigator.maxTouchPoints > 2 && /MacIntel/.test(navigator.platform);
        t2.isJson = (e3) => {
          if ("string" != typeof e3) return false;
          const t3 = e3.trim()[0], n3 = e3.trim().slice(-1);
          if ("{" === t3 && "}" === n3 || "[" === t3 && "]" === n3) try {
            return JSON.parse(e3), true;
          } catch (e4) {
            return false;
          }
          return false;
        };
        const o = (e3) => {
          if (!e3) return false;
          return "none" === window.getComputedStyle(e3).display || o(e3.parentElement);
        };
        t2.isParentOrElementHidden = o;
        t2.isScrollable = (e3) => {
          const t3 = window.getComputedStyle(e3), n3 = t3.overflowY, o2 = t3.overflowX, i2 = ("scroll" === n3 || "auto" === n3) && e3.scrollHeight > e3.clientHeight, r = ("scroll" === o2 || "auto" === o2) && e3.scrollWidth > e3.clientWidth;
          return i2 || r;
        };
        t2.debounce = (e3, t3 = 200) => {
          let n3;
          return (...o2) => {
            clearTimeout(n3), n3 = setTimeout(() => {
              e3.apply(this, o2);
            }, t3);
          };
        };
        t2.dispatch = (e3, t3, n3 = null) => {
          const o2 = new CustomEvent(e3, { detail: { payload: n3 }, bubbles: true, cancelable: true, composed: false });
          t3.dispatchEvent(o2);
        };
        t2.afterTransition = (e3, t3) => {
          const n3 = () => {
            t3(), e3.removeEventListener("transitionend", n3, true);
          }, o2 = window.getComputedStyle(e3), i2 = o2.getPropertyValue("transition-duration");
          "none" !== o2.getPropertyValue("transition-property") && parseFloat(i2) > 0 ? e3.addEventListener("transitionend", n3, true) : t3();
        };
        t2.htmlToElement = (e3) => {
          const t3 = document.createElement("template");
          return e3 = e3.trim(), t3.innerHTML = e3, t3.content.firstChild;
        };
        t2.classToClassList = (e3, t3, n3 = " ", o2 = "add") => {
          e3.split(n3).forEach((e4) => {
            e4.trim() && ("add" === o2 ? t3.classList.add(e4) : t3.classList.remove(e4));
          });
        };
        const i = { historyIndex: -1, addHistory(e3) {
          this.historyIndex = e3;
        }, existsInHistory(e3) {
          return e3 > this.historyIndex;
        }, clearHistory() {
          this.historyIndex = -1;
        } };
        t2.menuSearchHistory = i;
      }, 961: (e2, t2) => {
        Object.defineProperty(t2, "__esModule", { value: true });
        t2.default = class {
          constructor(e3, t3, n2) {
            this.el = e3, this.options = t3, this.events = n2, this.el = e3, this.options = t3, this.events = {};
          }
          createCollection(e3, t3) {
            var n2;
            e3.push({ id: (null === (n2 = null == t3 ? void 0 : t3.el) || void 0 === n2 ? void 0 : n2.id) || e3.length + 1, element: t3 });
          }
          fireEvent(e3, t3 = null) {
            if (this.events.hasOwnProperty(e3)) return this.events[e3](t3);
          }
          on(e3, t3) {
            this.events[e3] = t3;
          }
        };
      } }, t = {};
      var n = function n2(o) {
        var i = t[o];
        if (void 0 !== i) return i.exports;
        var r = t[o] = { exports: {} };
        return e[o].call(r.exports, r, r.exports, n2), r.exports;
      }(166);
      return n;
    })());
  }
});
export default require_tabs();
/*! Bundled license information:

@preline/tabs/index.js:
  (*
   * HSTabs
   * @version: 3.2.3
   * @author: Preline Labs Ltd.
   * @license: Licensed under MIT and Preline UI Fair Use License (https://preline.co/docs/license.html)
   * Copyright 2024 Preline Labs Ltd.
   *)
  (*
   * @version: 3.2.3
   * @author: Preline Labs Ltd.
   * @license: Licensed under MIT and Preline UI Fair Use License (https://preline.co/docs/license.html)
   * Copyright 2024 Preline Labs Ltd.
   *)
*/
//# sourceMappingURL=@preline_tabs.js.map
