import {
  __commonJS
} from "./chunk-EQCVQC35.js";

// node_modules/@preline/select/index.js
var require_select = __commonJS({
  "node_modules/@preline/select/index.js"(exports, module) {
    !function(t, e) {
      if ("object" == typeof exports && "object" == typeof module) module.exports = e();
      else if ("function" == typeof define && define.amd) define([], e);
      else {
        var s = e();
        for (var i in s) ("object" == typeof exports ? exports : t)[i] = s[i];
      }
    }(self, () => (() => {
      "use strict";
      var t = { 223: (t2, e2) => {
        Object.defineProperty(e2, "__esModule", { value: true }), e2.BREAKPOINTS = e2.COMBO_BOX_ACCESSIBILITY_KEY_SET = e2.SELECT_ACCESSIBILITY_KEY_SET = e2.TABS_ACCESSIBILITY_KEY_SET = e2.OVERLAY_ACCESSIBILITY_KEY_SET = e2.DROPDOWN_ACCESSIBILITY_KEY_SET = e2.POSITIONS = void 0, e2.POSITIONS = { auto: "auto", "auto-start": "auto-start", "auto-end": "auto-end", top: "top", "top-left": "top-start", "top-right": "top-end", bottom: "bottom", "bottom-left": "bottom-start", "bottom-right": "bottom-end", right: "right", "right-start": "right-start", "right-end": "right-end", left: "left", "left-start": "left-start", "left-end": "left-end" }, e2.DROPDOWN_ACCESSIBILITY_KEY_SET = ["Escape", "ArrowUp", "ArrowDown", "ArrowRight", "ArrowLeft", "Home", "End", "Enter"], e2.OVERLAY_ACCESSIBILITY_KEY_SET = ["Escape", "Tab"], e2.TABS_ACCESSIBILITY_KEY_SET = ["ArrowUp", "ArrowLeft", "ArrowDown", "ArrowRight", "Home", "End"], e2.SELECT_ACCESSIBILITY_KEY_SET = ["ArrowUp", "ArrowLeft", "ArrowDown", "ArrowRight", "Home", "End", "Escape", "Enter", "Space", "Tab"], e2.COMBO_BOX_ACCESSIBILITY_KEY_SET = ["ArrowUp", "ArrowLeft", "ArrowDown", "ArrowRight", "Home", "End", "Escape", "Enter"], e2.BREAKPOINTS = { xs: 0, sm: 640, md: 768, lg: 1024, xl: 1280, "2xl": 1536 };
      }, 248: (t2, e2) => {
        Object.defineProperty(e2, "__esModule", { value: true });
        e2.default = class {
          constructor() {
            this.components = [], this.currentlyOpenedComponents = [], this.activeComponent = null, this.allowedKeybindings = /* @__PURE__ */ new Set(["Escape", "Enter", " ", "Space", "ArrowDown", "ArrowUp", "ArrowLeft", "ArrowRight", "Tab", "Home", "End"]), this.initGlobalListeners();
          }
          initGlobalListeners() {
            document.addEventListener("keydown", (t3) => this.handleGlobalKeydown(t3)), document.addEventListener("focusin", (t3) => this.handleGlobalFocusin(t3));
          }
          isAllowedKeybinding(t3) {
            return !!this.allowedKeybindings.has(t3.key) || !(1 !== t3.key.length || !/^[a-zA-Z]$/.test(t3.key) || t3.metaKey || t3.ctrlKey || t3.altKey || t3.shiftKey);
          }
          getActiveComponent(t3) {
            if (!t3) return null;
            const e3 = this.components.filter((e4) => e4.wrapper.contains(t3) || e4.context && e4.context.contains(t3));
            if (0 === e3.length) return null;
            if (1 === e3.length) return e3[0];
            let s2 = null, i = Number.MAX_SAFE_INTEGER;
            for (const o of e3) {
              let e4 = 0, n = t3;
              for (; n && n !== o.wrapper && n !== o.context; ) e4++, n = n.parentElement;
              e4 < i && (i = e4, s2 = o);
            }
            return s2;
          }
          handleGlobalFocusin(t3) {
            const e3 = t3.target;
            this.activeComponent = this.getActiveComponent(e3);
          }
          handleGlobalKeydown(t3) {
            const e3 = t3.target;
            if (this.activeComponent = this.getActiveComponent(e3), this.activeComponent && this.isAllowedKeybinding(t3)) switch (t3.key) {
              case "Escape":
                if (this.activeComponent.isOpened) this.activeComponent.handlers.onEsc && (this.activeComponent.handlers.onEsc(), t3.preventDefault(), t3.stopPropagation());
                else {
                  const s3 = this.findClosestOpenParent(e3);
                  (null == s3 ? void 0 : s3.handlers.onEsc) && (s3.handlers.onEsc(), t3.preventDefault(), t3.stopPropagation());
                }
                break;
              case "Enter":
                this.activeComponent.handlers.onEnter && (this.activeComponent.handlers.onEnter(), t3.preventDefault(), t3.stopPropagation());
                break;
              case " ":
              case "Space":
                if ("INPUT" === e3.tagName || "TEXTAREA" === e3.tagName) return;
                this.activeComponent.handlers.onSpace && (this.activeComponent.handlers.onSpace(), t3.preventDefault(), t3.stopPropagation());
                break;
              case "ArrowDown":
              case "ArrowUp":
              case "ArrowLeft":
              case "ArrowRight":
                if (this.activeComponent.handlers.onArrow) {
                  if (t3.metaKey || t3.ctrlKey || t3.altKey || t3.shiftKey) return;
                  this.activeComponent.handlers.onArrow(t3), t3.preventDefault(), t3.stopPropagation();
                }
                break;
              case "Tab":
                if (!this.activeComponent.handlers.onTab) break;
                const s2 = t3.shiftKey ? this.activeComponent.handlers.onShiftTab : this.activeComponent.handlers.onTab;
                s2 && s2();
                break;
              case "Home":
                this.activeComponent.handlers.onHome && (this.activeComponent.handlers.onHome(), t3.preventDefault(), t3.stopPropagation());
                break;
              case "End":
                this.activeComponent.handlers.onEnd && (this.activeComponent.handlers.onEnd(), t3.preventDefault(), t3.stopPropagation());
                break;
              default:
                this.activeComponent.handlers.onFirstLetter && 1 === t3.key.length && /^[a-zA-Z]$/.test(t3.key) && (this.activeComponent.handlers.onFirstLetter(t3.key), t3.preventDefault(), t3.stopPropagation());
            }
          }
          findClosestOpenParent(t3) {
            let e3 = t3.parentElement;
            for (; e3; ) {
              const t4 = this.currentlyOpenedComponents.find((t5) => t5.wrapper === e3 && t5 !== this.activeComponent);
              if (t4) return t4;
              e3 = e3.parentElement;
            }
            return null;
          }
          registerComponent(t3, e3, s2 = true, i = "", o = "", n) {
            const l = { wrapper: t3, handlers: e3, isOpened: s2, name: i, selector: o, context: n, isRegistered: true };
            return this.components.push(l), l;
          }
          updateComponentState(t3, e3) {
            t3.isOpened = e3, e3 ? this.currentlyOpenedComponents.includes(t3) || this.currentlyOpenedComponents.push(t3) : this.currentlyOpenedComponents = this.currentlyOpenedComponents.filter((e4) => e4 !== t3);
          }
          unregisterComponent(t3) {
            this.components = this.components.filter((e3) => e3 !== t3), this.currentlyOpenedComponents = this.currentlyOpenedComponents.filter((e3) => e3 !== t3);
          }
          addAllowedKeybinding(t3) {
            this.allowedKeybindings.add(t3);
          }
          removeAllowedKeybinding(t3) {
            this.allowedKeybindings.delete(t3);
          }
          getAllowedKeybindings() {
            return Array.from(this.allowedKeybindings);
          }
        };
      }, 292: function(t2, e2) {
        Object.defineProperty(e2, "__esModule", { value: true }), e2.stringToBoolean = e2.menuSearchHistory = e2.isScrollable = e2.isParentOrElementHidden = e2.isJson = e2.isIpadOS = e2.isIOS = e2.isFormElement = e2.isFocused = e2.isEnoughSpace = e2.isDirectChild = e2.htmlToElement = e2.getZIndex = e2.getHighestZIndex = e2.getClassPropertyAlt = e2.getClassProperty = e2.dispatch = e2.debounce = e2.classToClassList = e2.afterTransition = void 0;
        e2.stringToBoolean = (t3) => "true" === t3;
        e2.getClassProperty = (t3, e3, s3 = "") => (window.getComputedStyle(t3).getPropertyValue(e3) || s3).replace(" ", "");
        e2.getClassPropertyAlt = (t3, e3, s3 = "") => {
          let i2 = "";
          return t3.classList.forEach((t4) => {
            t4.includes(e3) && (i2 = t4);
          }), i2.match(/:(.*)]/) ? i2.match(/:(.*)]/)[1] : s3;
        };
        const s2 = (t3) => window.getComputedStyle(t3).getPropertyValue("z-index");
        e2.getZIndex = s2;
        e2.getHighestZIndex = (t3) => {
          let e3 = Number.NEGATIVE_INFINITY;
          return t3.forEach((t4) => {
            let i2 = s2(t4);
            "auto" !== i2 && (i2 = parseInt(i2, 10), i2 > e3 && (e3 = i2));
          }), e3;
        };
        e2.isDirectChild = (t3, e3) => {
          const s3 = t3.children;
          for (let t4 = 0; t4 < s3.length; t4++) if (s3[t4] === e3) return true;
          return false;
        };
        e2.isEnoughSpace = (t3, e3, s3 = "auto", i2 = 10, o2 = null) => {
          const n = e3.getBoundingClientRect(), l = o2 ? o2.getBoundingClientRect() : null, a = window.innerHeight, r = l ? n.top - l.top : n.top, d = (o2 ? l.bottom : a) - n.bottom, h = t3.clientHeight + i2;
          return "bottom" === s3 ? d >= h : "top" === s3 ? r >= h : r >= h || d >= h;
        };
        e2.isFocused = (t3) => document.activeElement === t3;
        e2.isFormElement = (t3) => t3 instanceof HTMLInputElement || t3 instanceof HTMLTextAreaElement || t3 instanceof HTMLSelectElement;
        e2.isIOS = () => !!/iPad|iPhone|iPod/.test(navigator.platform) || navigator.maxTouchPoints && navigator.maxTouchPoints > 2 && /MacIntel/.test(navigator.platform);
        e2.isIpadOS = () => navigator.maxTouchPoints && navigator.maxTouchPoints > 2 && /MacIntel/.test(navigator.platform);
        e2.isJson = (t3) => {
          if ("string" != typeof t3) return false;
          const e3 = t3.trim()[0], s3 = t3.trim().slice(-1);
          if ("{" === e3 && "}" === s3 || "[" === e3 && "]" === s3) try {
            return JSON.parse(t3), true;
          } catch (t4) {
            return false;
          }
          return false;
        };
        const i = (t3) => {
          if (!t3) return false;
          return "none" === window.getComputedStyle(t3).display || i(t3.parentElement);
        };
        e2.isParentOrElementHidden = i;
        e2.isScrollable = (t3) => {
          const e3 = window.getComputedStyle(t3), s3 = e3.overflowY, i2 = e3.overflowX, o2 = ("scroll" === s3 || "auto" === s3) && t3.scrollHeight > t3.clientHeight, n = ("scroll" === i2 || "auto" === i2) && t3.scrollWidth > t3.clientWidth;
          return o2 || n;
        };
        e2.debounce = (t3, e3 = 200) => {
          let s3;
          return (...i2) => {
            clearTimeout(s3), s3 = setTimeout(() => {
              t3.apply(this, i2);
            }, e3);
          };
        };
        e2.dispatch = (t3, e3, s3 = null) => {
          const i2 = new CustomEvent(t3, { detail: { payload: s3 }, bubbles: true, cancelable: true, composed: false });
          e3.dispatchEvent(i2);
        };
        e2.afterTransition = (t3, e3) => {
          const s3 = () => {
            e3(), t3.removeEventListener("transitionend", s3, true);
          }, i2 = window.getComputedStyle(t3), o2 = i2.getPropertyValue("transition-duration");
          "none" !== i2.getPropertyValue("transition-property") && parseFloat(o2) > 0 ? t3.addEventListener("transitionend", s3, true) : e3();
        };
        e2.htmlToElement = (t3) => {
          const e3 = document.createElement("template");
          return t3 = t3.trim(), e3.innerHTML = t3, e3.content.firstChild;
        };
        e2.classToClassList = (t3, e3, s3 = " ", i2 = "add") => {
          t3.split(s3).forEach((t4) => {
            t4.trim() && ("add" === i2 ? e3.classList.add(t4) : e3.classList.remove(t4));
          });
        };
        const o = { historyIndex: -1, addHistory(t3) {
          this.historyIndex = t3;
        }, existsInHistory(t3) {
          return t3 > this.historyIndex;
        }, clearHistory() {
          this.historyIndex = -1;
        } };
        e2.menuSearchHistory = o;
      }, 442: function(t2, e2, s2) {
        var i = this && this.__awaiter || function(t3, e3, s3, i2) {
          return new (s3 || (s3 = Promise))(function(o2, n2) {
            function l2(t4) {
              try {
                r2(i2.next(t4));
              } catch (t5) {
                n2(t5);
              }
            }
            function a2(t4) {
              try {
                r2(i2.throw(t4));
              } catch (t5) {
                n2(t5);
              }
            }
            function r2(t4) {
              var e4;
              t4.done ? o2(t4.value) : (e4 = t4.value, e4 instanceof s3 ? e4 : new s3(function(t5) {
                t5(e4);
              })).then(l2, a2);
            }
            r2((i2 = i2.apply(t3, e3 || [])).next());
          });
        }, o = this && this.__importDefault || function(t3) {
          return t3 && t3.__esModule ? t3 : { default: t3 };
        };
        Object.defineProperty(e2, "__esModule", { value: true });
        const n = s2(292), l = o(s2(961)), a = o(s2(248)), r = s2(223);
        class d extends l.default {
          constructor(t3, e3) {
            var s3, i2, o2, n2, l2;
            super(t3, e3), this.disabledObserver = null, this.optionId = 0;
            const a2 = t3.getAttribute("data-hs-select"), r2 = a2 ? JSON.parse(a2) : {}, d2 = Object.assign(Object.assign({}, r2), e3);
            this.value = (null == d2 ? void 0 : d2.value) || this.el.value || null, this.placeholder = (null == d2 ? void 0 : d2.placeholder) || "Select...", this.hasSearch = (null == d2 ? void 0 : d2.hasSearch) || false, this.minSearchLength = null !== (s3 = null == d2 ? void 0 : d2.minSearchLength) && void 0 !== s3 ? s3 : 0, this.preventSearchFocus = (null == d2 ? void 0 : d2.preventSearchFocus) || false, this.mode = (null == d2 ? void 0 : d2.mode) || "default", this.viewport = void 0 !== (null == d2 ? void 0 : d2.viewport) ? document.querySelector(null == d2 ? void 0 : d2.viewport) : null, this._isOpened = Boolean(null == d2 ? void 0 : d2.isOpened) || false, this.isMultiple = this.el.hasAttribute("multiple") || false, this.isDisabled = this.el.hasAttribute("disabled") || false, this.selectedItems = [], this.apiUrl = (null == d2 ? void 0 : d2.apiUrl) || null, this.apiQuery = (null == d2 ? void 0 : d2.apiQuery) || null, this.apiOptions = (null == d2 ? void 0 : d2.apiOptions) || null, this.apiSearchQueryKey = (null == d2 ? void 0 : d2.apiSearchQueryKey) || null, this.apiDataPart = (null == d2 ? void 0 : d2.apiDataPart) || null, this.apiLoadMore = true === (null == d2 ? void 0 : d2.apiLoadMore) ? { perPage: 10, scrollThreshold: 100 } : "object" == typeof (null == d2 ? void 0 : d2.apiLoadMore) && null !== (null == d2 ? void 0 : d2.apiLoadMore) && { perPage: d2.apiLoadMore.perPage || 10, scrollThreshold: d2.apiLoadMore.scrollThreshold || 100 }, this.apiFieldsMap = (null == d2 ? void 0 : d2.apiFieldsMap) || null, this.apiIconTag = (null == d2 ? void 0 : d2.apiIconTag) || null, this.apiSelectedValues = (null == d2 ? void 0 : d2.apiSelectedValues) || null, this.currentPage = 0, this.isLoading = false, this.hasMore = true, this.wrapperClasses = (null == d2 ? void 0 : d2.wrapperClasses) || null, this.toggleTag = (null == d2 ? void 0 : d2.toggleTag) || null, this.toggleClasses = (null == d2 ? void 0 : d2.toggleClasses) || null, this.toggleCountText = void 0 === typeof (null == d2 ? void 0 : d2.toggleCountText) ? null : d2.toggleCountText, this.toggleCountTextPlacement = (null == d2 ? void 0 : d2.toggleCountTextPlacement) || "postfix", this.toggleCountTextMinItems = (null == d2 ? void 0 : d2.toggleCountTextMinItems) || 1, this.toggleCountTextMode = (null == d2 ? void 0 : d2.toggleCountTextMode) || "countAfterLimit", this.toggleSeparators = { items: (null === (i2 = null == d2 ? void 0 : d2.toggleSeparators) || void 0 === i2 ? void 0 : i2.items) || ", ", betweenItemsAndCounter: (null === (o2 = null == d2 ? void 0 : d2.toggleSeparators) || void 0 === o2 ? void 0 : o2.betweenItemsAndCounter) || "and" }, this.tagsItemTemplate = (null == d2 ? void 0 : d2.tagsItemTemplate) || null, this.tagsItemClasses = (null == d2 ? void 0 : d2.tagsItemClasses) || null, this.tagsInputId = (null == d2 ? void 0 : d2.tagsInputId) || null, this.tagsInputClasses = (null == d2 ? void 0 : d2.tagsInputClasses) || null, this.dropdownTag = (null == d2 ? void 0 : d2.dropdownTag) || null, this.dropdownClasses = (null == d2 ? void 0 : d2.dropdownClasses) || null, this.dropdownDirectionClasses = (null == d2 ? void 0 : d2.dropdownDirectionClasses) || null, this.dropdownSpace = (null == d2 ? void 0 : d2.dropdownSpace) || 10, this.dropdownPlacement = (null == d2 ? void 0 : d2.dropdownPlacement) || null, this.dropdownVerticalFixedPlacement = (null == d2 ? void 0 : d2.dropdownVerticalFixedPlacement) || null, this.dropdownScope = (null == d2 ? void 0 : d2.dropdownScope) || "parent", this.dropdownAutoPlacement = (null == d2 ? void 0 : d2.dropdownAutoPlacement) || false, this.searchTemplate = (null == d2 ? void 0 : d2.searchTemplate) || null, this.searchWrapperTemplate = (null == d2 ? void 0 : d2.searchWrapperTemplate) || null, this.searchWrapperClasses = (null == d2 ? void 0 : d2.searchWrapperClasses) || "bg-white p-2 sticky top-0", this.searchId = (null == d2 ? void 0 : d2.searchId) || null, this.searchLimit = (null == d2 ? void 0 : d2.searchLimit) || 1 / 0, this.isSearchDirectMatch = void 0 === (null == d2 ? void 0 : d2.isSearchDirectMatch) || (null == d2 ? void 0 : d2.isSearchDirectMatch), this.searchClasses = (null == d2 ? void 0 : d2.searchClasses) || "block w-[calc(100%-32px)] text-sm border-gray-200 rounded-md focus:border-blue-500 focus:ring-blue-500 dark:bg-neutral-900 dark:border-neutral-700 dark:text-neutral-400 py-2 px-3 my-2 mx-4", this.searchPlaceholder = (null == d2 ? void 0 : d2.searchPlaceholder) || "Search...", this.searchNoResultTemplate = (null == d2 ? void 0 : d2.searchNoResultTemplate) || "<span></span>", this.searchNoResultText = (null == d2 ? void 0 : d2.searchNoResultText) || "No results found", this.searchNoResultClasses = (null == d2 ? void 0 : d2.searchNoResultClasses) || "px-4 text-sm text-gray-800 dark:text-neutral-200", this.optionAllowEmptyOption = void 0 !== (null == d2 ? void 0 : d2.optionAllowEmptyOption) && (null == d2 ? void 0 : d2.optionAllowEmptyOption), this.optionTemplate = (null == d2 ? void 0 : d2.optionTemplate) || null, this.optionTag = (null == d2 ? void 0 : d2.optionTag) || null, this.optionClasses = (null == d2 ? void 0 : d2.optionClasses) || null, this.extraMarkup = (null == d2 ? void 0 : d2.extraMarkup) || null, this.descriptionClasses = (null == d2 ? void 0 : d2.descriptionClasses) || null, this.iconClasses = (null == d2 ? void 0 : d2.iconClasses) || null, this.isAddTagOnEnter = null === (n2 = null == d2 ? void 0 : d2.isAddTagOnEnter) || void 0 === n2 || n2, this.isSelectedOptionOnTop = null !== (l2 = null == d2 ? void 0 : d2.isSelectedOptionOnTop) && void 0 !== l2 && l2, this.animationInProcess = false, this.selectOptions = [], this.remoteOptions = [], this.tagsInputHelper = null, this.disabledObserver = new MutationObserver((t4) => {
              t4.some((t5) => "disabled" === t5.attributeName) && this.setDisabledState(this.el.hasAttribute("disabled"));
            }), this.disabledObserver.observe(this.el, { attributes: true, attributeFilter: ["disabled"] }), this.init();
          }
          wrapperClick(t3) {
            t3.target.closest("[data-hs-select-dropdown]") || t3.target.closest("[data-tag-value]") || this.tagsInput.focus();
          }
          toggleClick() {
            if (this.isDisabled) return false;
            this.toggleFn();
          }
          tagsInputFocus() {
            this._isOpened || this.open();
          }
          tagsInputInput() {
            this.calculateInputWidth();
          }
          tagsInputInputSecond(t3) {
            this.apiUrl || this.searchOptions(t3.target.value);
          }
          tagsInputKeydown(t3) {
            if ("Enter" === t3.key && this.isAddTagOnEnter) {
              const e3 = t3.target.value;
              if (this.selectOptions.find((t4) => t4.val === e3)) return false;
              this.addSelectOption(e3, e3), this.buildOption(e3, e3), this.buildOriginalOption(e3, e3), this.dropdown.querySelector(`[data-value="${e3}"]`).click(), this.resetTagsInputField();
            }
          }
          searchInput(t3) {
            const e3 = t3.target.value;
            this.apiUrl ? this.remoteSearch(e3) : this.searchOptions(e3);
          }
          setValue(t3) {
            if (this.value = t3, this.clearSelections(), Array.isArray(t3)) if ("tags" === this.mode) {
              this.unselectMultipleItems(), this.selectMultipleItems(), this.selectedItems = [];
              this.wrapper.querySelectorAll("[data-tag-value]").forEach((t4) => t4.remove()), this.setTagsItems(), this.reassignTagsInputPlaceholder(this.hasValue() ? "" : this.placeholder);
            } else this.toggleTextWrapper.innerHTML = this.hasValue() ? this.stringFromValue() : this.placeholder, this.unselectMultipleItems(), this.selectMultipleItems();
            else this.setToggleTitle(), this.toggle.querySelector("[data-icon]") && this.setToggleIcon(), this.toggle.querySelector("[data-title]") && this.setToggleTitle(), this.selectSingleItem();
          }
          setDisabledState(t3) {
            this.isDisabled = t3;
            const e3 = "tags" === this.mode ? this.wrapper : this.toggle;
            null == e3 || e3.classList.toggle("disabled", t3), t3 && this.isOpened() && this.close();
          }
          hasValue() {
            return this.isMultiple ? Array.isArray(this.value) && this.value.length > 0 && this.value.some((t3) => null != t3 && "" !== t3) : null !== this.value && void 0 !== this.value && "" !== this.value;
          }
          init() {
            this.createCollection(window.$hsSelectCollection, this), this.build(), "undefined" != typeof window && (window.HSAccessibilityObserver || (window.HSAccessibilityObserver = new a.default()), this.setupAccessibility());
          }
          build() {
            if (this.el.style.display = "none", this.el.children && Array.from(this.el.children).filter((t3) => this.optionAllowEmptyOption || !this.optionAllowEmptyOption && t3.value && "" !== t3.value).forEach((t3) => {
              const e3 = t3.getAttribute("data-hs-select-option");
              this.selectOptions = [...this.selectOptions, { title: t3.textContent, val: t3.value, disabled: t3.disabled, options: "undefined" !== e3 ? JSON.parse(e3) : null }];
            }), this.optionAllowEmptyOption && !this.value && (this.value = ""), this.isMultiple) {
              const t3 = Array.from(this.el.children).filter((t4) => t4.selected), e3 = [];
              t3.forEach((t4) => {
                e3.push(t4.value);
              }), this.value = e3;
            }
            this.buildWrapper(), "tags" === this.mode ? this.buildTags() : this.buildToggle(), this.buildDropdown(), this.extraMarkup && this.buildExtraMarkup();
          }
          buildWrapper() {
            this.wrapper = document.createElement("div"), this.wrapper.classList.add("hs-select", "relative"), this.setDisabledState(this.isDisabled), "tags" === this.mode && (this.onWrapperClickListener = (t3) => this.wrapperClick(t3), this.wrapper.addEventListener("click", this.onWrapperClickListener)), this.wrapperClasses && (0, n.classToClassList)(this.wrapperClasses, this.wrapper), this.el.before(this.wrapper), this.wrapper.append(this.el);
          }
          buildExtraMarkup() {
            const t3 = (t4) => {
              const e4 = (0, n.htmlToElement)(t4);
              return this.wrapper.append(e4), e4;
            }, e3 = (t4) => {
              t4.classList.contains("--prevent-click") || t4.addEventListener("click", (t5) => {
                t5.stopPropagation(), this.isDisabled || this.toggleFn();
              });
            };
            if (Array.isArray(this.extraMarkup)) this.extraMarkup.forEach((s3) => {
              const i2 = t3(s3);
              e3(i2);
            });
            else {
              const s3 = t3(this.extraMarkup);
              e3(s3);
            }
          }
          buildToggle() {
            var t3, e3;
            let s3, i2;
            this.toggleTextWrapper = document.createElement("span"), this.toggleTextWrapper.classList.add("truncate"), this.toggle = (0, n.htmlToElement)(this.toggleTag || "<div></div>"), s3 = this.toggle.querySelector("[data-icon]"), i2 = this.toggle.querySelector("[data-title]"), !this.isMultiple && s3 && this.setToggleIcon(), !this.isMultiple && i2 && this.setToggleTitle(), this.isMultiple ? this.toggleTextWrapper.innerHTML = this.hasValue() ? this.stringFromValue() : this.placeholder : this.toggleTextWrapper.innerHTML = (null === (t3 = this.getItemByValue(this.value)) || void 0 === t3 ? void 0 : t3.title) || this.placeholder, i2 || this.toggle.append(this.toggleTextWrapper), this.toggleClasses && (0, n.classToClassList)(this.toggleClasses, this.toggle), this.isDisabled && this.toggle.classList.add("disabled"), this.wrapper && this.wrapper.append(this.toggle), (null === (e3 = this.toggle) || void 0 === e3 ? void 0 : e3.ariaExpanded) && (this._isOpened ? this.toggle.ariaExpanded = "true" : this.toggle.ariaExpanded = "false"), this.onToggleClickListener = () => this.toggleClick(), this.toggle.addEventListener("click", this.onToggleClickListener);
          }
          setToggleIcon() {
            var t3;
            const e3 = this.getItemByValue(this.value), s3 = this.toggle.querySelector("[data-icon]");
            if (s3) {
              s3.innerHTML = "";
              const i2 = (0, n.htmlToElement)(this.apiUrl && this.apiIconTag ? this.apiIconTag || "" : (null === (t3 = null == e3 ? void 0 : e3.options) || void 0 === t3 ? void 0 : t3.icon) || "");
              this.value && this.apiUrl && this.apiIconTag && e3[this.apiFieldsMap.icon] && (i2.src = e3[this.apiFieldsMap.icon] || ""), s3.append(i2), (null == i2 ? void 0 : i2.src) ? s3.classList.remove("hidden") : s3.classList.add("hidden");
            }
          }
          setToggleTitle() {
            const t3 = this.toggle.querySelector("[data-title]");
            let e3 = this.placeholder;
            if (this.optionAllowEmptyOption && "" === this.value) {
              const t4 = this.selectOptions.find((t5) => "" === t5.val);
              e3 = (null == t4 ? void 0 : t4.title) || this.placeholder;
            } else if (this.value) if (this.apiUrl) {
              const t4 = this.remoteOptions.find((t5) => `${t5[this.apiFieldsMap.val]}` === this.value || `${t5[this.apiFieldsMap.title]}` === this.value);
              t4 && (e3 = t4[this.apiFieldsMap.title]);
            } else {
              const t4 = this.selectOptions.find((t5) => t5.val === this.value);
              t4 && (e3 = t4.title);
            }
            t3 ? (t3.innerHTML = e3, t3.classList.add("truncate"), this.toggle.append(t3)) : this.toggleTextWrapper.innerHTML = e3;
          }
          buildTags() {
            this.isDisabled && this.wrapper.classList.add("disabled"), this.wrapper.setAttribute("tabindex", "0"), this.buildTagsInput(), this.setTagsItems();
          }
          reassignTagsInputPlaceholder(t3) {
            this.tagsInput.placeholder = t3, this.tagsInputHelper.innerHTML = t3, this.calculateInputWidth();
          }
          buildTagsItem(t3) {
            var e3, s3, i2, o2, l2;
            const a2 = this.getItemByValue(t3);
            let r2, d2, h, p;
            const c = document.createElement("div");
            if (c.setAttribute("data-tag-value", t3), this.tagsItemClasses && (0, n.classToClassList)(this.tagsItemClasses, c), this.tagsItemTemplate && (r2 = (0, n.htmlToElement)(this.tagsItemTemplate), c.append(r2)), (null === (e3 = null == a2 ? void 0 : a2.options) || void 0 === e3 ? void 0 : e3.icon) || this.apiIconTag) {
              const t4 = (0, n.htmlToElement)(this.apiUrl && this.apiIconTag ? this.apiIconTag : null === (s3 = null == a2 ? void 0 : a2.options) || void 0 === s3 ? void 0 : s3.icon);
              this.apiUrl && this.apiIconTag && a2[this.apiFieldsMap.icon] && (t4.src = a2[this.apiFieldsMap.icon] || ""), p = r2 ? r2.querySelector("[data-icon]") : document.createElement("span"), p.append(t4), r2 || c.append(p);
            }
            !r2 || !r2.querySelector("[data-icon]") || (null === (i2 = null == a2 ? void 0 : a2.options) || void 0 === i2 ? void 0 : i2.icon) || this.apiUrl || this.apiIconTag || a2[null === (o2 = this.apiFieldsMap) || void 0 === o2 ? void 0 : o2.icon] || r2.querySelector("[data-icon]").classList.add("hidden"), d2 = r2 ? r2.querySelector("[data-title]") : document.createElement("span"), this.apiUrl && (null === (l2 = this.apiFieldsMap) || void 0 === l2 ? void 0 : l2.title) && a2[this.apiFieldsMap.title] ? d2.textContent = a2[this.apiFieldsMap.title] : d2.textContent = a2.title || "", r2 || c.append(d2), r2 ? h = r2.querySelector("[data-remove]") : (h = document.createElement("span"), h.textContent = "X", c.append(h)), h.addEventListener("click", () => {
              this.value = this.value.filter((e4) => e4 !== t3), this.selectedItems = this.selectedItems.filter((e4) => e4 !== t3), this.hasValue() || this.reassignTagsInputPlaceholder(this.placeholder), this.unselectMultipleItems(), this.selectMultipleItems(), c.remove(), this.triggerChangeEventForNativeSelect();
            }), this.wrapper.append(c);
          }
          getItemByValue(t3) {
            return this.apiUrl ? this.remoteOptions.find((e3) => `${e3[this.apiFieldsMap.val]}` === t3 || e3[this.apiFieldsMap.title] === t3) : this.selectOptions.find((e3) => e3.val === t3);
          }
          setTagsItems() {
            if (this.value) {
              (Array.isArray(this.value) ? this.value : null != this.value ? [this.value] : []).forEach((t3) => {
                this.selectedItems.includes(t3) || this.buildTagsItem(t3), this.selectedItems = this.selectedItems.includes(t3) ? this.selectedItems : [...this.selectedItems, t3];
              });
            }
            this._isOpened && this.floatingUIInstance && this.floatingUIInstance.update();
          }
          buildTagsInput() {
            this.tagsInput = document.createElement("input"), this.tagsInputId && (this.tagsInput.id = this.tagsInputId), this.tagsInputClasses && (0, n.classToClassList)(this.tagsInputClasses, this.tagsInput), this.tagsInput.setAttribute("tabindex", "-1"), this.onTagsInputFocusListener = () => this.tagsInputFocus(), this.onTagsInputInputListener = () => this.tagsInputInput(), this.onTagsInputInputSecondListener = (0, n.debounce)((t3) => this.tagsInputInputSecond(t3)), this.onTagsInputKeydownListener = (t3) => this.tagsInputKeydown(t3), this.tagsInput.addEventListener("focus", this.onTagsInputFocusListener), this.tagsInput.addEventListener("input", this.onTagsInputInputListener), this.tagsInput.addEventListener("input", this.onTagsInputInputSecondListener), this.tagsInput.addEventListener("keydown", this.onTagsInputKeydownListener), this.wrapper.append(this.tagsInput), setTimeout(() => {
              this.adjustInputWidth(), this.reassignTagsInputPlaceholder(this.hasValue() ? "" : this.placeholder);
            });
          }
          buildDropdown() {
            this.dropdown = (0, n.htmlToElement)(this.dropdownTag || "<div></div>"), this.dropdown.setAttribute("data-hs-select-dropdown", ""), "parent" === this.dropdownScope && (this.dropdown.classList.add("absolute"), this.dropdownVerticalFixedPlacement || this.dropdown.classList.add("top-full")), this.dropdown.role = "listbox", this.dropdown.tabIndex = -1, this.dropdown.ariaOrientation = "vertical", this._isOpened || this.dropdown.classList.add("hidden"), this.dropdownClasses && (0, n.classToClassList)(this.dropdownClasses, this.dropdown), this.wrapper && this.wrapper.append(this.dropdown), this.dropdown && this.hasSearch && this.buildSearch(), this.selectOptions && this.selectOptions.forEach((t3, e3) => this.buildOption(t3.title, t3.val, t3.disabled, t3.selected, t3.options, `${e3}`)), this.apiUrl && this.optionsFromRemoteData(), this.apiUrl || (this.sortElements(this.el, "option"), this.sortElements(this.dropdown, "[data-value]")), "window" === this.dropdownScope && this.buildFloatingUI(), this.dropdown && this.apiLoadMore && this.setupInfiniteScroll();
          }
          setupInfiniteScroll() {
            this.dropdown.addEventListener("scroll", this.handleScroll.bind(this));
          }
          handleScroll() {
            return i(this, void 0, void 0, function* () {
              if (!this.dropdown || this.isLoading || !this.hasMore || !this.apiLoadMore) return;
              const { scrollTop: t3, scrollHeight: e3, clientHeight: s3 } = this.dropdown;
              e3 - t3 - s3 < ("object" == typeof this.apiLoadMore ? this.apiLoadMore.scrollThreshold : 100) && (yield this.loadMore());
            });
          }
          loadMore() {
            return i(this, void 0, void 0, function* () {
              var t3, e3, s3, i2;
              if (this.apiUrl && !this.isLoading && this.hasMore && this.apiLoadMore) {
                this.isLoading = true;
                try {
                  const o2 = new URL(this.apiUrl), n2 = (null === (t3 = this.apiFieldsMap) || void 0 === t3 ? void 0 : t3.page) || (null === (e3 = this.apiFieldsMap) || void 0 === e3 ? void 0 : e3.offset) || "page", l2 = !!(null === (s3 = this.apiFieldsMap) || void 0 === s3 ? void 0 : s3.offset), a2 = "object" == typeof this.apiLoadMore ? this.apiLoadMore.perPage : 10;
                  if (l2) {
                    const t4 = this.currentPage * a2;
                    o2.searchParams.set(n2, t4.toString()), this.currentPage++;
                  } else this.currentPage++, o2.searchParams.set(n2, this.currentPage.toString());
                  o2.searchParams.set((null === (i2 = this.apiFieldsMap) || void 0 === i2 ? void 0 : i2.limit) || "limit", a2.toString());
                  const r2 = yield fetch(o2.toString(), this.apiOptions || {}), d2 = yield r2.json(), h = this.apiDataPart ? d2[this.apiDataPart] : d2.results, p = d2.count || 0, c = this.currentPage * a2;
                  h && h.length > 0 ? (this.remoteOptions = [...this.remoteOptions || [], ...h], this.buildOptionsFromRemoteData(h), this.hasMore = c < p) : this.hasMore = false;
                } catch (t4) {
                  this.hasMore = false, console.error("Error loading more options:", t4);
                } finally {
                  this.isLoading = false;
                }
              }
            });
          }
          buildFloatingUI() {
            if ("undefined" != typeof FloatingUIDOM && FloatingUIDOM.computePosition) {
              document.body.appendChild(this.dropdown);
              const t3 = "tags" === this.mode ? this.wrapper : this.toggle, e3 = [FloatingUIDOM.offset([0, 5])];
              this.dropdownAutoPlacement && "function" == typeof FloatingUIDOM.flip && e3.push(FloatingUIDOM.flip({ fallbackPlacements: ["bottom-start", "bottom-end", "top-start", "top-end"] }));
              const s3 = { placement: r.POSITIONS[this.dropdownPlacement] || "bottom", strategy: "fixed", middleware: e3 }, i2 = () => {
                FloatingUIDOM.computePosition(t3, this.dropdown, s3).then(({ x: t4, y: e4, placement: s4 }) => {
                  Object.assign(this.dropdown.style, { position: "fixed", left: `${t4}px`, top: `${e4}px`, ["margin" + ("bottom" === s4 ? "Top" : "top" === s4 ? "Bottom" : "right" === s4 ? "Left" : "Right")]: `${this.dropdownSpace}px` }), this.dropdown.setAttribute("data-placement", s4);
                });
              };
              i2();
              const o2 = FloatingUIDOM.autoUpdate(t3, this.dropdown, i2);
              this.floatingUIInstance = { update: i2, destroy: o2 };
            } else console.error("FloatingUIDOM not found! Please enable it on the page.");
          }
          updateDropdownWidth() {
            const t3 = "tags" === this.mode ? this.wrapper : this.toggle;
            this.dropdown.style.width = `${t3.clientWidth}px`;
          }
          buildSearch() {
            let t3;
            this.searchWrapper = (0, n.htmlToElement)(this.searchWrapperTemplate || "<div></div>"), this.searchWrapperClasses && (0, n.classToClassList)(this.searchWrapperClasses, this.searchWrapper), t3 = this.searchWrapper.querySelector("[data-input]");
            const e3 = (0, n.htmlToElement)(this.searchTemplate || '<input type="text">');
            this.search = "INPUT" === e3.tagName ? e3 : e3.querySelector(":scope input"), this.search.placeholder = this.searchPlaceholder, this.searchClasses && (0, n.classToClassList)(this.searchClasses, this.search), this.searchId && (this.search.id = this.searchId), this.onSearchInputListener = (0, n.debounce)((t4) => this.searchInput(t4)), this.search.addEventListener("input", this.onSearchInputListener), t3 ? t3.append(e3) : this.searchWrapper.append(e3), this.dropdown.append(this.searchWrapper);
          }
          buildOption(t3, e3, s3 = false, i2 = false, o2, l2 = "1", a2) {
            var r2;
            let d2 = null, h = null, p = null, c = null;
            const u = (0, n.htmlToElement)(this.optionTag || "<div></div>");
            if (u.setAttribute("data-value", e3), u.setAttribute("data-title-value", t3), u.setAttribute("tabIndex", l2), u.classList.add("cursor-pointer"), u.setAttribute("data-id", a2 || `${this.optionId}`), a2 || this.optionId++, s3 && u.classList.add("disabled"), i2 && (this.isMultiple ? this.value = [...this.value, e3] : this.value = e3), this.optionTemplate && (d2 = (0, n.htmlToElement)(this.optionTemplate), u.append(d2)), d2 ? (h = d2.querySelector("[data-title]"), h.textContent = t3 || "") : u.textContent = t3 || "", o2) {
              if (o2.icon) {
                const e4 = (0, n.htmlToElement)(null !== (r2 = this.apiIconTag) && void 0 !== r2 ? r2 : o2.icon);
                if (e4.classList.add("max-w-full"), this.apiUrl && (e4.setAttribute("alt", t3), e4.setAttribute("src", o2.icon)), d2) p = d2.querySelector("[data-icon]"), p.append(e4);
                else {
                  const t4 = (0, n.htmlToElement)("<div></div>");
                  this.iconClasses && (0, n.classToClassList)(this.iconClasses, t4), t4.append(e4), u.append(t4);
                }
              }
              if (o2.description) if (d2) c = d2.querySelector("[data-description]"), c && c.append(o2.description);
              else {
                const t4 = (0, n.htmlToElement)("<div></div>");
                t4.textContent = o2.description, this.descriptionClasses && (0, n.classToClassList)(this.descriptionClasses, t4), u.append(t4);
              }
            }
            d2 && d2.querySelector("[data-icon]") && !o2 && !(null == o2 ? void 0 : o2.icon) && d2.querySelector("[data-icon]").classList.add("hidden"), this.value && (this.isMultiple ? this.value.includes(e3) : this.value === e3) && u.classList.add("selected"), s3 || u.addEventListener("click", () => this.onSelectOption(e3)), this.optionClasses && (0, n.classToClassList)(this.optionClasses, u), this.dropdown && this.dropdown.append(u), i2 && this.setNewValue();
          }
          buildOptionFromRemoteData(t3, e3, s3 = false, i2 = false, o2 = "1", n2, l2) {
            o2 ? this.buildOption(t3, e3, s3, i2, l2, o2, n2) : alert("ID parameter is required for generating remote options! Please check your API endpoint have it.");
          }
          buildOptionsFromRemoteData(t3) {
            t3.forEach((t4, e3) => {
              let s3 = null, i2 = "", o2 = "";
              const n2 = { id: "", val: "", title: "", icon: null, description: null, rest: {} };
              Object.keys(t4).forEach((e4) => {
                var l2;
                t4[this.apiFieldsMap.id] && (s3 = t4[this.apiFieldsMap.id]), t4[this.apiFieldsMap.val] && (o2 = `${t4[this.apiFieldsMap.val]}`), t4[this.apiFieldsMap.title] && (i2 = t4[this.apiFieldsMap.title], t4[this.apiFieldsMap.val] || (o2 = i2)), t4[this.apiFieldsMap.icon] && (n2.icon = t4[this.apiFieldsMap.icon]), t4[null === (l2 = this.apiFieldsMap) || void 0 === l2 ? void 0 : l2.description] && (n2.description = t4[this.apiFieldsMap.description]), n2.rest[e4] = t4[e4];
              });
              if (!this.dropdown.querySelector(`[data-value="${o2}"]`)) {
                const t5 = !!this.apiSelectedValues && (Array.isArray(this.apiSelectedValues) ? this.apiSelectedValues.includes(o2) : this.apiSelectedValues === o2);
                this.buildOriginalOption(i2, o2, s3, false, t5, n2), this.buildOptionFromRemoteData(i2, o2, false, t5, `${e3}`, s3, n2), t5 && (this.isMultiple ? (this.value || (this.value = []), Array.isArray(this.value) && (this.value = [...this.value, o2])) : this.value = o2);
              }
            }), this.sortElements(this.el, "option"), this.sortElements(this.dropdown, "[data-value]");
          }
          optionsFromRemoteData() {
            return i(this, arguments, void 0, function* (t3 = "") {
              const e3 = yield this.apiRequest(t3);
              this.remoteOptions = e3, e3.length ? this.buildOptionsFromRemoteData(this.remoteOptions) : console.log("There is no data were responded!");
            });
          }
          apiRequest() {
            return i(this, arguments, void 0, function* (t3 = "") {
              var e3, s3, i2, o2, n2, l2, a2, r2, d2, h;
              try {
                const p = new URL(this.apiUrl), c = new URLSearchParams(null !== (e3 = this.apiQuery) && void 0 !== e3 ? e3 : ""), u = null !== (s3 = this.apiOptions) && void 0 !== s3 ? s3 : {}, g = null !== (i2 = this.apiSearchQueryKey) && void 0 !== i2 ? i2 : "q", m = (null != t3 ? t3 : "").trim().toLowerCase();
                if ("" !== m && c.set(g, encodeURIComponent(m)), this.apiLoadMore) {
                  const t4 = "object" == typeof this.apiLoadMore ? this.apiLoadMore.perPage : 10, e4 = null !== (a2 = null !== (n2 = null === (o2 = this.apiFieldsMap) || void 0 === o2 ? void 0 : o2.page) && void 0 !== n2 ? n2 : null === (l2 = this.apiFieldsMap) || void 0 === l2 ? void 0 : l2.offset) && void 0 !== a2 ? a2 : "page", s4 = null !== (d2 = null === (r2 = this.apiFieldsMap) || void 0 === r2 ? void 0 : r2.limit) && void 0 !== d2 ? d2 : "limit", i3 = Boolean(null === (h = this.apiFieldsMap) || void 0 === h ? void 0 : h.offset);
                  c.delete(e4), c.delete(s4), c.set(e4, i3 ? "0" : "1"), c.set(s4, String(t4));
                }
                p.search = c.toString();
                const v = yield fetch(p.toString(), u), w = yield v.json();
                return this.apiDataPart ? w[this.apiDataPart] : w;
              } catch (t4) {
                console.error(t4);
              }
            });
          }
          sortElements(t3, e3) {
            const s3 = Array.from(t3.querySelectorAll(e3));
            this.isSelectedOptionOnTop && s3.sort((t4, e4) => {
              const s4 = t4.classList.contains("selected") || t4.hasAttribute("selected"), i2 = e4.classList.contains("selected") || e4.hasAttribute("selected");
              return s4 && !i2 ? -1 : !s4 && i2 ? 1 : 0;
            }), s3.forEach((e4) => t3.appendChild(e4));
          }
          remoteSearch(t3) {
            return i(this, void 0, void 0, function* () {
              if (t3.length <= this.minSearchLength) {
                const t4 = yield this.apiRequest("");
                return this.remoteOptions = t4, Array.from(this.dropdown.querySelectorAll("[data-value]")).forEach((t5) => t5.remove()), Array.from(this.el.querySelectorAll("option[value]")).forEach((t5) => {
                  t5.remove();
                }), t4.length ? this.buildOptionsFromRemoteData(t4) : console.log("No data responded!"), false;
              }
              const e3 = yield this.apiRequest(t3);
              this.remoteOptions = e3;
              let s3 = e3.map((t4) => `${t4.id}`), i2 = null;
              const o2 = this.dropdown.querySelectorAll("[data-value]");
              this.el.querySelectorAll("[data-hs-select-option]").forEach((t4) => {
                var e4;
                const i3 = t4.getAttribute("data-id");
                s3.includes(i3) || (null === (e4 = this.value) || void 0 === e4 ? void 0 : e4.includes(t4.value)) || this.destroyOriginalOption(t4.value);
              }), o2.forEach((t4) => {
                var e4;
                const i3 = t4.getAttribute("data-id");
                s3.includes(i3) || (null === (e4 = this.value) || void 0 === e4 ? void 0 : e4.includes(t4.getAttribute("data-value"))) ? s3 = s3.filter((t5) => t5 !== i3) : this.destroyOption(t4.getAttribute("data-value"));
              }), i2 = e3.filter((t4) => s3.includes(`${t4.id}`)), i2.length ? this.buildOptionsFromRemoteData(i2) : console.log("No data responded!");
            });
          }
          destroyOption(t3) {
            const e3 = this.dropdown.querySelector(`[data-value="${t3}"]`);
            if (!e3) return false;
            e3.remove();
          }
          buildOriginalOption(t3, e3, s3, i2, o2, l2) {
            const a2 = (0, n.htmlToElement)("<option></option>");
            a2.setAttribute("value", e3), i2 && a2.setAttribute("disabled", "disabled"), o2 && a2.setAttribute("selected", "selected"), s3 && a2.setAttribute("data-id", s3), a2.setAttribute("data-hs-select-option", JSON.stringify(l2)), a2.innerText = t3, this.el.append(a2);
          }
          destroyOriginalOption(t3) {
            const e3 = this.el.querySelector(`[value="${t3}"]`);
            if (!e3) return false;
            e3.remove();
          }
          buildTagsInputHelper() {
            this.tagsInputHelper = document.createElement("span"), this.tagsInputHelper.style.fontSize = window.getComputedStyle(this.tagsInput).fontSize, this.tagsInputHelper.style.fontFamily = window.getComputedStyle(this.tagsInput).fontFamily, this.tagsInputHelper.style.fontWeight = window.getComputedStyle(this.tagsInput).fontWeight, this.tagsInputHelper.style.letterSpacing = window.getComputedStyle(this.tagsInput).letterSpacing, this.tagsInputHelper.style.visibility = "hidden", this.tagsInputHelper.style.whiteSpace = "pre", this.tagsInputHelper.style.position = "absolute", this.wrapper.appendChild(this.tagsInputHelper);
          }
          calculateInputWidth() {
            this.tagsInputHelper.textContent = this.tagsInput.value || this.tagsInput.placeholder;
            const t3 = parseInt(window.getComputedStyle(this.tagsInput).paddingLeft) + parseInt(window.getComputedStyle(this.tagsInput).paddingRight), e3 = parseInt(window.getComputedStyle(this.tagsInput).borderLeftWidth) + parseInt(window.getComputedStyle(this.tagsInput).borderRightWidth), s3 = this.tagsInputHelper.offsetWidth + t3 + e3, i2 = this.wrapper.offsetWidth - (parseInt(window.getComputedStyle(this.wrapper).paddingLeft) + parseInt(window.getComputedStyle(this.wrapper).paddingRight));
            this.tagsInput.style.width = `${Math.min(s3, i2) + 2}px`;
          }
          adjustInputWidth() {
            this.buildTagsInputHelper(), this.calculateInputWidth();
          }
          onSelectOption(t3) {
            if (this.clearSelections(), this.isMultiple ? (Array.isArray(this.value) || (this.value = []), this.value = this.value.includes(t3) ? this.value.filter((e3) => e3 !== t3) : [...this.value, t3], this.selectMultipleItems(), this.setNewValue()) : (this.value = t3, this.selectSingleItem(), this.setNewValue()), this.fireEvent("change", this.value), "tags" === this.mode) {
              const t4 = this.selectedItems.filter((t5) => !this.value.includes(t5));
              t4.length && t4.forEach((t5) => {
                this.selectedItems = this.selectedItems.filter((e3) => e3 !== t5), this.wrapper.querySelector(`[data-tag-value="${t5}"]`).remove();
              }), this.resetTagsInputField();
            }
            this.isMultiple || (this.toggle.querySelector("[data-icon]") && this.setToggleIcon(), this.toggle.querySelector("[data-title]") && this.setToggleTitle(), this.close(true)), this.hasValue() || "tags" !== this.mode || this.reassignTagsInputPlaceholder(this.placeholder), this._isOpened && "tags" === this.mode && this.tagsInput && this.tagsInput.focus(), this.triggerChangeEventForNativeSelect();
          }
          triggerChangeEventForNativeSelect() {
            const t3 = new Event("change", { bubbles: true });
            this.el.dispatchEvent(t3), (0, n.dispatch)("change.hs.select", this.el, this.value);
          }
          addSelectOption(t3, e3, s3, i2, o2) {
            this.selectOptions = [...this.selectOptions, { title: t3, val: e3, disabled: s3, selected: i2, options: o2 }];
          }
          removeSelectOption(t3, e3 = false) {
            if (!!!this.selectOptions.some((e4) => e4.val === t3)) return false;
            this.selectOptions = this.selectOptions.filter((e4) => e4.val !== t3), this.value = e3 ? this.value.filter((e4) => e4 !== t3) : t3;
          }
          resetTagsInputField() {
            this.tagsInput.value = "", this.reassignTagsInputPlaceholder(""), this.searchOptions("");
          }
          clearSelections() {
            Array.from(this.dropdown.children).forEach((t3) => {
              t3.classList.contains("selected") && t3.classList.remove("selected");
            }), Array.from(this.el.children).forEach((t3) => {
              t3.selected && (t3.selected = false);
            });
          }
          setNewValue() {
            if ("tags" === this.mode) this.setTagsItems();
            else if (this.optionAllowEmptyOption && "" === this.value) {
              const t3 = this.selectOptions.find((t4) => "" === t4.val);
              this.toggleTextWrapper.innerHTML = (null == t3 ? void 0 : t3.title) || this.placeholder;
            } else if (this.hasValue()) if (this.apiUrl) {
              const t3 = this.dropdown.querySelector(`[data-value="${this.value}"]`);
              if (t3) this.toggleTextWrapper.innerHTML = t3.getAttribute("data-title-value") || this.placeholder;
              else {
                const t4 = this.remoteOptions.find((t5) => (t5[this.apiFieldsMap.val] ? `${t5[this.apiFieldsMap.val]}` : t5[this.apiFieldsMap.title]) === this.value);
                this.toggleTextWrapper.innerHTML = t4 ? `${t4[this.apiFieldsMap.title]}` : this.stringFromValue();
              }
            } else this.toggleTextWrapper.innerHTML = this.stringFromValue();
            else this.toggleTextWrapper.innerHTML = this.placeholder;
          }
          stringFromValueBasic(t3) {
            var e3;
            const s3 = [];
            let i2 = "";
            if (t3.forEach((t4) => {
              this.isMultiple ? Array.isArray(this.value) && this.value.includes(t4.val) && s3.push(t4.title) : this.value === t4.val && s3.push(t4.title);
            }), void 0 !== this.toggleCountText && null !== this.toggleCountText && s3.length >= this.toggleCountTextMinItems) if ("nItemsAndCount" === this.toggleCountTextMode) {
              const t4 = s3.slice(0, this.toggleCountTextMinItems - 1), o2 = [t4.join(this.toggleSeparators.items)], n2 = "" + (s3.length - t4.length);
              if ((null === (e3 = null == this ? void 0 : this.toggleSeparators) || void 0 === e3 ? void 0 : e3.betweenItemsAndCounter) && o2.push(this.toggleSeparators.betweenItemsAndCounter), this.toggleCountText) switch (this.toggleCountTextPlacement) {
                case "postfix-no-space":
                  o2.push(`${n2}${this.toggleCountText}`);
                  break;
                case "prefix-no-space":
                  o2.push(`${this.toggleCountText}${n2}`);
                  break;
                case "prefix":
                  o2.push(`${this.toggleCountText} ${n2}`);
                  break;
                default:
                  o2.push(`${n2} ${this.toggleCountText}`);
              }
              i2 = o2.join(" ");
            } else i2 = `${s3.length} ${this.toggleCountText}`;
            else i2 = s3.join(this.toggleSeparators.items);
            return i2;
          }
          stringFromValueRemoteData() {
            const t3 = this.dropdown.querySelectorAll("[data-title-value]"), e3 = [];
            let s3 = "";
            if (t3.forEach((t4) => {
              const s4 = t4.getAttribute("data-value"), i2 = t4.getAttribute("data-title-value");
              this.isMultiple ? Array.isArray(this.value) && this.value.includes(s4) && e3.push(i2) : this.value === s4 && e3.push(i2);
            }), this.toggleCountText && "" !== this.toggleCountText && e3.length >= this.toggleCountTextMinItems) if ("nItemsAndCount" === this.toggleCountTextMode) {
              const t4 = e3.slice(0, this.toggleCountTextMinItems - 1);
              s3 = `${t4.join(this.toggleSeparators.items)} ${this.toggleSeparators.betweenItemsAndCounter} ${e3.length - t4.length} ${this.toggleCountText}`;
            } else s3 = `${e3.length} ${this.toggleCountText}`;
            else s3 = e3.join(this.toggleSeparators.items);
            return s3;
          }
          stringFromValue() {
            return this.apiUrl ? this.stringFromValueRemoteData() : this.stringFromValueBasic(this.selectOptions);
          }
          selectSingleItem() {
            Array.from(this.el.children).find((t4) => this.value === t4.value).selected = true;
            const t3 = Array.from(this.dropdown.children).find((t4) => this.value === t4.getAttribute("data-value"));
            t3 && t3.classList.add("selected"), this.sortElements(this.el, "option"), this.sortElements(this.dropdown, "[data-value]");
          }
          selectMultipleItems() {
            Array.isArray(this.value) && (Array.from(this.dropdown.children).filter((t3) => this.value.includes(t3.getAttribute("data-value"))).forEach((t3) => t3.classList.add("selected")), Array.from(this.el.children).filter((t3) => this.value.includes(t3.value)).forEach((t3) => t3.selected = true), this.sortElements(this.el, "option"), this.sortElements(this.dropdown, "[data-value]"));
          }
          unselectMultipleItems() {
            Array.from(this.dropdown.children).forEach((t3) => t3.classList.remove("selected")), Array.from(this.el.children).forEach((t3) => t3.selected = false), this.sortElements(this.el, "option"), this.sortElements(this.dropdown, "[data-value]");
          }
          searchOptions(t3) {
            if (t3.length <= this.minSearchLength) {
              this.searchNoResult && (this.searchNoResult.remove(), this.searchNoResult = null);
              return this.dropdown.querySelectorAll("[data-value]").forEach((t4) => {
                t4.classList.remove("hidden");
              }), false;
            }
            this.searchNoResult && (this.searchNoResult.remove(), this.searchNoResult = null), this.searchNoResult = (0, n.htmlToElement)(this.searchNoResultTemplate), this.searchNoResult.innerText = this.searchNoResultText, (0, n.classToClassList)(this.searchNoResultClasses, this.searchNoResult);
            const e3 = this.dropdown.querySelectorAll("[data-value]");
            let s3, i2 = false;
            this.searchLimit && (s3 = 0), e3.forEach((e4) => {
              const o2 = e4.getAttribute("data-title-value").toLocaleLowerCase();
              let n2;
              if (this.isSearchDirectMatch) n2 = !o2.includes(t3.toLowerCase()) || this.searchLimit && s3 >= this.searchLimit;
              else {
                const e5 = t3 ? t3.split("").map((t4) => /\w/.test(t4) ? `${t4}[\\W_]*` : "\\W*").join("") : "";
                n2 = !new RegExp(e5, "i").test(o2.trim()) || this.searchLimit && s3 >= this.searchLimit;
              }
              n2 ? e4.classList.add("hidden") : (e4.classList.remove("hidden"), i2 = true, this.searchLimit && s3++);
            }), i2 || this.dropdown.append(this.searchNoResult);
          }
          eraseToggleIcon() {
            const t3 = this.toggle.querySelector("[data-icon]");
            t3 && (t3.innerHTML = null, t3.classList.add("hidden"));
          }
          eraseToggleTitle() {
            const t3 = this.toggle.querySelector("[data-title]");
            t3 ? t3.innerHTML = this.placeholder : this.toggleTextWrapper.innerHTML = this.placeholder;
          }
          toggleFn() {
            this._isOpened ? this.close() : this.open();
          }
          setupAccessibility() {
            this.accessibilityComponent = window.HSAccessibilityObserver.registerComponent(this.wrapper, { onEnter: () => {
              if (this._isOpened) {
                const t3 = this.dropdown.querySelector(".hs-select-option-highlighted");
                t3 && (this.onSelectOption(t3.getAttribute("data-value") || ""), this._isOpened && t3.focus());
              } else this.open();
            }, onSpace: () => {
              if (this._isOpened) {
                const t3 = this.dropdown.querySelector(".hs-select-option-highlighted");
                t3 && (this.onSelectOption(t3.getAttribute("data-value") || ""), this._isOpened && t3.focus());
              } else this.open();
            }, onEsc: () => {
              this._isOpened && this.close(true);
            }, onArrow: (t3) => {
              if (!t3.metaKey) if (this._isOpened || "ArrowDown" !== t3.key) {
                if (this._isOpened) switch (t3.key) {
                  case "ArrowDown":
                    this.focusMenuItem("next");
                    break;
                  case "ArrowUp":
                    this.focusMenuItem("prev");
                    break;
                  case "Home":
                    this.onStartEnd(true);
                    break;
                  case "End":
                    this.onStartEnd(false);
                }
              } else this.open();
            }, onHome: () => {
              this._isOpened && this.onStartEnd(true);
            }, onEnd: () => {
              this._isOpened && this.onStartEnd(false);
            }, onTab: () => {
              this._isOpened && this.close();
            } }, this._isOpened, "Select", ".hs-select", this.dropdown);
          }
          focusMenuItem(t3) {
            const e3 = Array.from(this.dropdown.querySelectorAll(":scope > *:not(.hidden)")).filter((t4) => !t4.classList.contains("disabled"));
            if (!e3.length) return;
            const s3 = this.dropdown.querySelector(".hs-select-option-highlighted"), i2 = s3 ? e3.indexOf(s3) : -1, o2 = "next" === t3 ? (i2 + 1) % e3.length : (i2 - 1 + e3.length) % e3.length;
            s3 && s3.classList.remove("hs-select-option-highlighted"), e3[o2].classList.add("hs-select-option-highlighted"), e3[o2].focus();
          }
          onStartEnd(t3 = true) {
            if (!this.dropdown) return;
            const e3 = Array.from(this.dropdown.querySelectorAll(":scope > *:not(.hidden)")).filter((t4) => !t4.classList.contains("disabled"));
            if (!e3.length) return;
            const s3 = this.dropdown.querySelector(".hs-select-option-highlighted");
            s3 && s3.classList.remove("hs-select-option-highlighted");
            const i2 = t3 ? 0 : e3.length - 1;
            e3[i2].classList.add("hs-select-option-highlighted"), e3[i2].focus();
          }
          destroy() {
            var t3;
            this.wrapper && this.wrapper.removeEventListener("click", this.onWrapperClickListener), this.toggle && this.toggle.removeEventListener("click", this.onToggleClickListener), this.tagsInput && (this.tagsInput.removeEventListener("focus", this.onTagsInputFocusListener), this.tagsInput.removeEventListener("input", this.onTagsInputInputListener), this.tagsInput.removeEventListener("input", this.onTagsInputInputSecondListener), this.tagsInput.removeEventListener("keydown", this.onTagsInputKeydownListener)), this.search && this.search.removeEventListener("input", this.onSearchInputListener);
            const e3 = this.el.parentElement.parentElement;
            this.el.classList.add("hidden"), this.el.style.display = "", e3.prepend(this.el), e3.querySelector(".hs-select").remove(), this.wrapper = null, null === (t3 = this.disabledObserver) || void 0 === t3 || t3.disconnect(), this.disabledObserver = null, window.$hsSelectCollection = window.$hsSelectCollection.filter(({ element: t4 }) => t4.el !== this.el);
          }
          open() {
            var t3;
            const e3 = (null === (t3 = null === window || void 0 === window ? void 0 : window.$hsSelectCollection) || void 0 === t3 ? void 0 : t3.find((t4) => t4.element.isOpened())) || null;
            if (e3 && e3.element.close(), this.animationInProcess) return false;
            this.animationInProcess = true, "window" === this.dropdownScope && this.dropdown.classList.add("invisible"), this.dropdown.classList.remove("hidden"), "window" !== this.dropdownScope && this.recalculateDirection(), setTimeout(() => {
              var t4;
              (null === (t4 = null == this ? void 0 : this.toggle) || void 0 === t4 ? void 0 : t4.ariaExpanded) && (this.toggle.ariaExpanded = "true"), this.wrapper.classList.add("active"), this.dropdown.classList.add("opened"), this.dropdown.classList.contains("w-full") && "window" === this.dropdownScope && this.updateDropdownWidth(), this.floatingUIInstance && "window" === this.dropdownScope && (this.floatingUIInstance.update(), this.dropdown.classList.remove("invisible")), this.hasSearch && !this.preventSearchFocus && this.search.focus(), this.animationInProcess = false;
            }), this._isOpened = true, window.HSAccessibilityObserver && this.accessibilityComponent && window.HSAccessibilityObserver.updateComponentState(this.accessibilityComponent, this._isOpened);
          }
          close(t3 = false) {
            var e3, s3, i2, o2;
            if (this.animationInProcess) return false;
            this.animationInProcess = true, (null === (e3 = null == this ? void 0 : this.toggle) || void 0 === e3 ? void 0 : e3.ariaExpanded) && (this.toggle.ariaExpanded = "false"), this.wrapper.classList.remove("active"), this.dropdown.classList.remove("opened", "bottom-full", "top-full"), (null === (s3 = this.dropdownDirectionClasses) || void 0 === s3 ? void 0 : s3.bottom) && this.dropdown.classList.remove(this.dropdownDirectionClasses.bottom), (null === (i2 = this.dropdownDirectionClasses) || void 0 === i2 ? void 0 : i2.top) && this.dropdown.classList.remove(this.dropdownDirectionClasses.top), this.dropdown.style.marginTop = "", this.dropdown.style.marginBottom = "", (0, n.afterTransition)(this.dropdown, () => {
              var e4;
              this.dropdown.classList.add("hidden"), this.hasSearch && (this.search.value = "", this.apiUrl || this.search.dispatchEvent(new Event("input", { bubbles: true })), this.search.blur()), t3 && ((null === (e4 = this.mode) || void 0 === e4 ? void 0 : e4.includes("tags")) ? this.wrapper.focus() : this.toggle.focus()), this.animationInProcess = false;
            }), null === (o2 = this.dropdown.querySelector(".hs-select-option-highlighted")) || void 0 === o2 || o2.classList.remove("hs-select-option-highlighted"), this._isOpened = false, window.HSAccessibilityObserver && this.accessibilityComponent && window.HSAccessibilityObserver.updateComponentState(this.accessibilityComponent, this._isOpened);
          }
          addOption(t3) {
            let e3 = `${this.selectOptions.length}`;
            const s3 = (t4) => {
              const { title: s4, val: i2, disabled: o2, selected: n2, options: l2 } = t4;
              !!this.selectOptions.some((t5) => t5.val === i2) || (this.addSelectOption(s4, i2, o2, n2, l2), this.buildOption(s4, i2, o2, n2, l2, e3), this.buildOriginalOption(s4, i2, null, o2, n2, l2), n2 && !this.isMultiple && this.onSelectOption(i2));
            };
            Array.isArray(t3) ? t3.forEach((t4) => {
              s3(t4);
            }) : s3(t3), this.sortElements(this.el, "option"), this.sortElements(this.dropdown, "[data-value]");
          }
          removeOption(t3) {
            const e3 = (t4, e4 = false) => {
              !!this.selectOptions.some((e5) => e5.val === t4) && (this.removeSelectOption(t4, e4), this.destroyOption(t4), this.destroyOriginalOption(t4), this.value === t4 && (this.value = null, this.eraseToggleTitle(), this.eraseToggleIcon()));
            };
            Array.isArray(t3) ? t3.forEach((t4) => {
              e3(t4, this.isMultiple);
            }) : e3(t3, this.isMultiple), this.setNewValue(), this.sortElements(this.el, "option"), this.sortElements(this.dropdown, "[data-value]");
          }
          recalculateDirection() {
            var t3, e3, s3, i2;
            if ((null == this ? void 0 : this.dropdownVerticalFixedPlacement) && (this.dropdown.classList.contains("bottom-full") || this.dropdown.classList.contains("top-full"))) return false;
            "top" === (null == this ? void 0 : this.dropdownVerticalFixedPlacement) ? (this.dropdown.classList.add("bottom-full"), this.dropdown.style.marginBottom = `${this.dropdownSpace}px`) : "bottom" === (null == this ? void 0 : this.dropdownVerticalFixedPlacement) ? (this.dropdown.classList.add("top-full"), this.dropdown.style.marginTop = `${this.dropdownSpace}px`) : (0, n.isEnoughSpace)(this.dropdown, this.toggle || this.tagsInput, "bottom", this.dropdownSpace, this.viewport) ? (this.dropdown.classList.remove("bottom-full"), (null === (t3 = this.dropdownDirectionClasses) || void 0 === t3 ? void 0 : t3.bottom) && this.dropdown.classList.remove(this.dropdownDirectionClasses.bottom), this.dropdown.style.marginBottom = "", this.dropdown.classList.add("top-full"), (null === (e3 = this.dropdownDirectionClasses) || void 0 === e3 ? void 0 : e3.top) && this.dropdown.classList.add(this.dropdownDirectionClasses.top), this.dropdown.style.marginTop = `${this.dropdownSpace}px`) : (this.dropdown.classList.remove("top-full"), (null === (s3 = this.dropdownDirectionClasses) || void 0 === s3 ? void 0 : s3.top) && this.dropdown.classList.remove(this.dropdownDirectionClasses.top), this.dropdown.style.marginTop = "", this.dropdown.classList.add("bottom-full"), (null === (i2 = this.dropdownDirectionClasses) || void 0 === i2 ? void 0 : i2.bottom) && this.dropdown.classList.add(this.dropdownDirectionClasses.bottom), this.dropdown.style.marginBottom = `${this.dropdownSpace}px`);
          }
          isOpened() {
            return this._isOpened || false;
          }
          containsElement(t3) {
            var e3;
            return (null === (e3 = this.wrapper) || void 0 === e3 ? void 0 : e3.contains(t3)) || false;
          }
          static findInCollection(t3) {
            return window.$hsSelectCollection.find((e3) => t3 instanceof d ? e3.element.el === t3.el : "string" == typeof t3 ? e3.element.el === document.querySelector(t3) : e3.element.el === t3) || null;
          }
          static getInstance(t3, e3) {
            const s3 = window.$hsSelectCollection.find((e4) => e4.element.el === ("string" == typeof t3 ? document.querySelector(t3) : t3));
            return s3 ? e3 ? s3 : s3.element : null;
          }
          static autoInit() {
            window.$hsSelectCollection || (window.$hsSelectCollection = [], window.addEventListener("click", (t3) => {
              const e3 = t3.target;
              d.closeCurrentlyOpened(e3);
            })), window.$hsSelectCollection && (window.$hsSelectCollection = window.$hsSelectCollection.filter(({ element: t3 }) => document.contains(t3.el))), document.querySelectorAll("[data-hs-select]:not(.--prevent-on-load-init)").forEach((t3) => {
              if (!window.$hsSelectCollection.find((e3) => {
                var s3;
                return (null === (s3 = null == e3 ? void 0 : e3.element) || void 0 === s3 ? void 0 : s3.el) === t3;
              })) {
                const e3 = t3.getAttribute("data-hs-select"), s3 = e3 ? JSON.parse(e3) : {};
                new d(t3, s3);
              }
            });
          }
          static open(t3) {
            const e3 = d.findInCollection(t3);
            e3 && !e3.element.isOpened() && e3.element.open();
          }
          static close(t3) {
            const e3 = d.findInCollection(t3);
            e3 && e3.element.isOpened() && e3.element.close();
          }
          static closeCurrentlyOpened(t3 = null) {
            if (!t3.closest(".hs-select.active") && !t3.closest("[data-hs-select-dropdown].opened")) {
              const t4 = window.$hsSelectCollection.filter((t5) => t5.element.isOpened()) || null;
              t4 && t4.forEach((t5) => {
                t5.element.close();
              });
            }
          }
        }
        window.addEventListener("load", () => {
          d.autoInit();
        }), document.addEventListener("scroll", () => {
          if (!window.$hsSelectCollection) return false;
          const t3 = window.$hsSelectCollection.find((t4) => t4.element.isOpened());
          t3 && t3.element.recalculateDirection();
        }), "undefined" != typeof window && (window.HSSelect = d), e2.default = d;
      }, 961: (t2, e2) => {
        Object.defineProperty(e2, "__esModule", { value: true });
        e2.default = class {
          constructor(t3, e3, s2) {
            this.el = t3, this.options = e3, this.events = s2, this.el = t3, this.options = e3, this.events = {};
          }
          createCollection(t3, e3) {
            var s2;
            t3.push({ id: (null === (s2 = null == e3 ? void 0 : e3.el) || void 0 === s2 ? void 0 : s2.id) || t3.length + 1, element: e3 });
          }
          fireEvent(t3, e3 = null) {
            if (this.events.hasOwnProperty(t3)) return this.events[t3](e3);
          }
          on(t3, e3) {
            this.events[t3] = e3;
          }
        };
      } }, e = {};
      var s = function s2(i) {
        var o = e[i];
        if (void 0 !== o) return o.exports;
        var n = e[i] = { exports: {} };
        return t[i].call(n.exports, n, n.exports, s2), n.exports;
      }(442);
      return s;
    })());
  }
});
export default require_select();
/*! Bundled license information:

@preline/select/index.js:
  (*
   * @version: 3.2.3
   * @author: Preline Labs Ltd.
   * @license: Licensed under MIT and Preline UI Fair Use License (https://preline.co/docs/license.html)
   * Copyright 2024 Preline Labs Ltd.
   *)
  (*
   * HSSelect
   * @version: 3.2.3
   * @author: Preline Labs Ltd.
   * @license: Licensed under MIT and Preline UI Fair Use License (https://preline.co/docs/license.html)
   * Copyright 2024 Preline Labs Ltd.
   *)
*/
//# sourceMappingURL=@preline_select.js.map
