import {
  HSBasePlugin,
  afterTransition,
  dispatch,
  getClassProperty,
  stringToBoolean
} from "./chunk-WHMMH7RJ.js";
import {
  __publicField
} from "./chunk-EQCVQC35.js";

// node_modules/preline/src/plugins/accordion/index.ts
var _HSAccordion = class _HSAccordion extends HSBasePlugin {
  constructor(el, options, events) {
    super(el, options, events);
    __publicField(this, "toggle");
    __publicField(this, "content");
    __publicField(this, "group");
    __publicField(this, "isAlwaysOpened");
    __publicField(this, "keepOneOpen");
    __publicField(this, "isToggleStopPropagated");
    __publicField(this, "onToggleClickListener");
    this.toggle = this.el.querySelector(".hs-accordion-toggle") || null;
    this.content = this.el.querySelector(".hs-accordion-content") || null;
    this.group = this.el.closest(".hs-accordion-group") || null;
    this.update();
    this.isToggleStopPropagated = stringToBoolean(
      getClassProperty(this.toggle, "--stop-propagation", "false") || "false"
    );
    this.keepOneOpen = this.group ? stringToBoolean(
      getClassProperty(this.group, "--keep-one-open", "false") || "false"
    ) : false;
    if (this.toggle && this.content) this.init();
  }
  init() {
    this.createCollection(window.$hsAccordionCollection, this);
    this.onToggleClickListener = (evt) => this.toggleClick(evt);
    this.toggle.addEventListener("click", this.onToggleClickListener);
  }
  // Public methods
  toggleClick(evt) {
    if (this.el.classList.contains("active") && this.keepOneOpen) return false;
    if (this.isToggleStopPropagated) evt.stopPropagation();
    if (this.el.classList.contains("active")) {
      this.hide();
    } else {
      this.show();
    }
  }
  show() {
    var _a;
    if (this.group && !this.isAlwaysOpened && this.group.querySelector(":scope > .hs-accordion.active") && this.group.querySelector(":scope > .hs-accordion.active") !== this.el) {
      const currentlyOpened = window.$hsAccordionCollection.find(
        (el) => el.element.el === this.group.querySelector(":scope > .hs-accordion.active")
      );
      currentlyOpened.element.hide();
    }
    if (this.el.classList.contains("active")) return false;
    this.el.classList.add("active");
    if ((_a = this == null ? void 0 : this.toggle) == null ? void 0 : _a.ariaExpanded) this.toggle.ariaExpanded = "true";
    this.fireEvent("beforeOpen", this.el);
    dispatch("beforeOpen.hs.accordion", this.el, this.el);
    this.content.style.display = "block";
    this.content.style.height = "0";
    setTimeout(() => {
      this.content.style.height = `${this.content.scrollHeight}px`;
      afterTransition(this.content, () => {
        this.content.style.display = "block";
        this.content.style.height = "";
        this.fireEvent("open", this.el);
        dispatch("open.hs.accordion", this.el, this.el);
      });
    });
  }
  hide() {
    var _a;
    if (!this.el.classList.contains("active")) return false;
    this.el.classList.remove("active");
    if ((_a = this == null ? void 0 : this.toggle) == null ? void 0 : _a.ariaExpanded) this.toggle.ariaExpanded = "false";
    this.fireEvent("beforeClose", this.el);
    dispatch("beforeClose.hs.accordion", this.el, this.el);
    this.content.style.height = `${this.content.scrollHeight}px`;
    setTimeout(() => {
      this.content.style.height = "0";
    });
    afterTransition(this.content, () => {
      this.content.style.display = "none";
      this.content.style.height = "";
      this.fireEvent("close", this.el);
      dispatch("close.hs.accordion", this.el, this.el);
    });
  }
  update() {
    this.group = this.el.closest(".hs-accordion-group") || null;
    if (!this.group) return false;
    this.isAlwaysOpened = this.group.hasAttribute("data-hs-accordion-always-open") || false;
    window.$hsAccordionCollection.map((el) => {
      if (el.id === this.el.id) {
        el.element.group = this.group;
        el.element.isAlwaysOpened = this.isAlwaysOpened;
      }
      return el;
    });
  }
  destroy() {
    var _a;
    if ((_a = _HSAccordion == null ? void 0 : _HSAccordion.selectable) == null ? void 0 : _a.length) {
      _HSAccordion.selectable.forEach((item) => {
        item.listeners.forEach(({ el, listener }) => {
          el.removeEventListener("click", listener);
        });
      });
    }
    if (this.onToggleClickListener) {
      this.toggle.removeEventListener("click", this.onToggleClickListener);
    }
    this.toggle = null;
    this.content = null;
    this.group = null;
    this.onToggleClickListener = null;
    window.$hsAccordionCollection = window.$hsAccordionCollection.filter(
      ({ element }) => element.el !== this.el
    );
  }
  // Static methods
  static findInCollection(target) {
    return window.$hsAccordionCollection.find((el) => {
      if (target instanceof _HSAccordion) return el.element.el === target.el;
      else if (typeof target === "string") return el.element.el === document.querySelector(target);
      else return el.element.el === target;
    }) || null;
  }
  static autoInit() {
    if (!window.$hsAccordionCollection) window.$hsAccordionCollection = [];
    if (window.$hsAccordionCollection) {
      window.$hsAccordionCollection = window.$hsAccordionCollection.filter(
        ({ element }) => document.contains(element.el)
      );
    }
    document.querySelectorAll(".hs-accordion:not(.--prevent-on-load-init)").forEach((el) => {
      if (!window.$hsAccordionCollection.find(
        (elC) => {
          var _a;
          return ((_a = elC == null ? void 0 : elC.element) == null ? void 0 : _a.el) === el;
        }
      ))
        new _HSAccordion(el);
    });
  }
  static getInstance(target, isInstance) {
    const elInCollection = window.$hsAccordionCollection.find(
      (el) => el.element.el === (typeof target === "string" ? document.querySelector(target) : target)
    );
    return elInCollection ? isInstance ? elInCollection : elInCollection.element.el : null;
  }
  static show(target) {
    const instance = _HSAccordion.findInCollection(target);
    if (instance && instance.element.content.style.display !== "block") instance.element.show();
  }
  static hide(target) {
    const instance = _HSAccordion.findInCollection(target);
    const style = instance ? window.getComputedStyle(instance.element.content) : null;
    if (instance && style.display !== "none") instance.element.hide();
  }
  static treeView() {
    if (!document.querySelectorAll(".hs-accordion-treeview-root").length)
      return false;
    this.selectable = [];
    document.querySelectorAll(".hs-accordion-treeview-root").forEach((el) => {
      const data = el == null ? void 0 : el.getAttribute("data-hs-accordion-options");
      const options = data ? JSON.parse(data) : {};
      this.selectable.push({
        el,
        options: { ...options },
        listeners: []
      });
    });
    if (this.selectable.length)
      this.selectable.forEach((item) => {
        const { el } = item;
        el.querySelectorAll(".hs-accordion-selectable").forEach(
          (_el) => {
            const listener = (evt) => this.onSelectableClick(evt, item, _el);
            _el.addEventListener("click", listener);
            item.listeners.push({ el: _el, listener });
          }
        );
      });
  }
  static toggleSelected(root, item) {
    if (item.classList.contains("selected")) item.classList.remove("selected");
    else {
      root.el.querySelectorAll(".hs-accordion-selectable").forEach((el) => el.classList.remove("selected"));
      item.classList.add("selected");
    }
  }
  // Backward compatibility
  static on(evt, target, cb) {
    const instance = _HSAccordion.findInCollection(target);
    if (instance) instance.element.events[evt] = cb;
  }
};
__publicField(_HSAccordion, "selectable");
__publicField(_HSAccordion, "onSelectableClick", (evt, item, el) => {
  evt.stopPropagation();
  _HSAccordion.toggleSelected(item, el);
});
var HSAccordion = _HSAccordion;
window.addEventListener("load", () => {
  HSAccordion.autoInit();
  if (document.querySelectorAll(".hs-accordion-treeview-root").length)
    HSAccordion.treeView();
});
if (typeof window !== "undefined") {
  window.HSAccordion = HSAccordion;
}
var accordion_default = HSAccordion;
export {
  accordion_default as default
};
/*! Bundled license information:

preline/src/plugins/accordion/index.ts:
  (*
   * HSAccordion
   * @version: 3.2.3
   * @author: Preline Labs Ltd.
   * @license: Licensed under MIT and Preline UI Fair Use License (https://preline.co/docs/license.html)
   * Copyright 2024 Preline Labs Ltd.
   *)
*/
//# sourceMappingURL=preline_src_plugins_accordion.js.map
